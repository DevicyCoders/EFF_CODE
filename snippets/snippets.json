{
    "EffyMethod 0": {
        "scope": "javascript",
        "prefix": "Efficy.activateCategory(EditHandle, category)",
        "body": "Efficy.activateCategory(${1:EditHandle}, ${2:category});\n",
        "description": "Activates a category in the edit context. If the user does not have the appropriate rights on the category, an exception is thrown."
    },
    "EffyMethod 0+": {
        "scope": "javascript",
        "prefix": "ac",
        "body": "Efficy.activateCategory(${1:EditHandle}, ${2:category});\n",
        "description": "Activates a category in the edit context. If the user does not have the appropriate rights on the category, an exception is thrown."
    },
    "EffyMethod 1": {
        "scope": "javascript",
        "prefix": "Efficy.addLink(entity, detail, key, detailKey, relationId, ignoreExisting)",
        "body": "Efficy.addLink(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey}, ${5:relationId}, ${6:ignoreExisting});\n",
        "description": "Adds a database relation without using an edit context. Can be used when multiple relations are available."
    },
    "EffyMethod 2": {
        "scope": "javascript",
        "prefix": "Efficy.addLink2(entity, detail, key, detailKey, ignoreExisting)",
        "body": "Efficy.addLink2(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey}, ${5:ignoreExisting});\n",
        "description": "Adds a database relation without using an edit context."
    },
    "EffyMethod 2+": {
        "scope": "javascript",
        "prefix": "adl",
        "body": "Efficy.addLink2(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey}, ${5:ignoreExisting});\n",
        "description": "Adds a database relation without using an edit context."
    },
    "EffyMethod 3": {
        "scope": "javascript",
        "prefix": "Efficy.addRecent(entity, key, name, favoriteKey, keyList, gridName)",
        "body": "Efficy.addRecent(${1:entity}, ${2:key}, ${3:name}, ${4:favoriteKey}, ${5:keyList}, ${6:gridName});\n",
        "description": "Adds the record identified by entity and key to the list of recent items."
    },
    "EffyMethod 4": {
        "scope": "javascript",
        "prefix": "Efficy.aliasList()",
        "body": "undefined;\n",
        "description": "Returns the list of aliases."
    },
    "EffyMethod 5": {
        "scope": "javascript",
        "prefix": "Efficy.applySecurityToContent(EditHandle)",
        "body": "Efficy.applySecurityToContent(${1:EditHandle});\n",
        "description": "Applies the security of a container entity to its linked records."
    },
    "EffyMethod 6": {
        "scope": "javascript",
        "prefix": "Efficy.autoMergeDuplicate(entity, key1, key2, alwaysKeepFirst)",
        "body": "Efficy.autoMergeDuplicate(${1:entity}, ${2:key1}, ${3:key2}, ${4:alwaysKeepFirst});\n",
        "description": "Merges duplicates automatically."
    },
    "EffyMethod 7": {
        "scope": "javascript",
        "prefix": "Efficy.callDotNetLibraryFunction(dllName, dllClass, functionName, parameters)",
        "body": "Efficy.callDotNetLibraryFunction(${1:dllName}, ${2:dllClass}, ${3:functionName}, ${4:parameters});\n",
        "description": "Uses .Net external libraries from within a workflow or a server-side script."
    },
    "EffyMethod 8": {
        "scope": "javascript",
        "prefix": "Efficy.callDotNetLibraryFunctionVl(dllName, dllClass, functionName, parameters, results)",
        "body": "Efficy.callDotNetLibraryFunctionVl(${1:dllName}, ${2:dllClass}, ${3:functionName}, ${4:parameters}, ${5:results});\n",
        "description": "Deprecated since Efficy 11 Uses .NET external libraries from within a workflow or a server-side script and returns a TValueList."
    },
    "EffyMethod 9": {
        "scope": "javascript",
        "prefix": "Efficy.categoryModified(EditHandle, category, fieldName)",
        "body": "Efficy.categoryModified(${1:EditHandle}, ${2:category}, ${3:fieldName});\n",
        "description": "Tests whether a field value of a category data set has been modified since the beginning of the edit operation.\nThe value is reset when Efficy.commitChanges() is executed."
    },
    "EffyMethod 10": {
        "scope": "javascript",
        "prefix": "Efficy.clearDetail(EditHandle, detail)",
        "body": "Efficy.clearDetail(${1:EditHandle}, ${2:detail});\n",
        "description": "Clears all relations for the specified detail."
    },
    "EffyMethod 11": {
        "scope": "javascript",
        "prefix": "Efficy.closeContext(contextHandle)",
        "body": "Efficy.closeContext(${1:contextHandle});\n",
        "description": "Closes a context. A context remains memory-resident on the web server until it's closed."
    },
    "EffyMethod 12": {
        "scope": "javascript",
        "prefix": "Efficy.closingCommit(EditHandle)",
        "body": "Efficy.closingCommit(${1:EditHandle});\n",
        "description": "Commits the changes, releases the record and closes the context."
    },
    "EffyMethod 13": {
        "scope": "javascript",
        "prefix": "Efficy.collectGarbage()",
        "body": "undefined;\n",
        "description": "Do not use this from within a script unless you know what you're doing."
    },
    "EffyMethod 14": {
        "scope": "javascript",
        "prefix": "Efficy.commitChanges(EditHandle, refreshAfterCommit)",
        "body": "Efficy.commitChanges(${1:EditHandle}, ${2:refreshAfterCommit});\n",
        "description": "Commits the changes of the edit context to the database."
    },
    "EffyMethod 14+": {
        "scope": "javascript",
        "prefix": "cc",
        "body": "Efficy.commitChanges(${1:EditHandle}, false);\n",
        "description": "Commits the changes of the edit context to the database."
    },
    "EffyMethod 15": {
        "scope": "javascript",
        "prefix": "Efficy.consult(contextHandle, key, forceRefresh)",
        "body": "Efficy.consult(${1:contextHandle}, ${2:key}, ${3:forceRefresh});\n",
        "description": "Consults a record in the context handle and returns its main data set."
    },
    "EffyMethod 16": {
        "scope": "javascript",
        "prefix": "Efficy.consultAgenda(queryHandle, beginDate, endDate, userIDs, activeUser, includeRelations, queryView, planning)",
        "body": "Efficy.consultAgenda(${1:queryHandle}, ${2:beginDate}, ${3:endDate}, ${4:userIDs}, ${5:activeUser}, ${6:includeRelations}, ${7:queryView}, ${8:planning});\n",
        "description": "Retrieves the agenda (diary) for the specified period and users."
    },
    "EffyMethod 17": {
        "scope": "javascript",
        "prefix": "Efficy.consultDetail(queryHandle, contextHandle, key, detail, forceRefresh, getAllRecords, queryView)",
        "body": "Efficy.consultDetail(${1:queryHandle}, ${2:contextHandle}, ${3:key}, ${4:detail}, ${5:forceRefresh}, ${6:getAllRecords}, ${7:queryView});\n",
        "description": "Retrieves the list of linked detail items in a data set."
    },
    "EffyMethod 18": {
        "scope": "javascript",
        "prefix": "Efficy.consultEntityListVl(queryHandle, entity, userIDs, opened, activeUser, queryView, getAllRecords, maxUsedDays)",
        "body": "Efficy.consultEntityListVl(${1:queryHandle}, ${2:entity}, ${3:userIDs}, ${4:opened}, ${5:activeUser}, ${6:queryView}, ${7:getAllRecords}, ${8:maxUsedDays});\n",
        "description": "Deprecated since Efficy 11 Retrieves a list of entity records (Using TValueList)."
    },
    "EffyMethod 19": {
        "scope": "javascript",
        "prefix": "Efficy.consultFavorites(forEntity)",
        "body": "Efficy.consultFavorites(${1:forEntity});\n",
        "description": "Since Efficy 11.2 Retrieves the list of favorites."
    },
    "EffyMethod 20": {
        "scope": "javascript",
        "prefix": "Efficy.consultMainCompany(contextHandle, contactKey)",
        "body": "Efficy.consultMainCompany(${1:contextHandle}, ${2:contactKey});\n",
        "description": "Consults the main company of the specified contact."
    },
    "EffyMethod 21": {
        "scope": "javascript",
        "prefix": "Efficy.consultMany(contextHandle, findFields, orderByFields, findValues, forceRefresh)",
        "body": "Efficy.consultMany(${1:contextHandle}, ${2:findFields}, ${3:orderByFields}, ${4:findValues}, ${5:forceRefresh});\n",
        "description": "Selects records that exactly match certain field values and returns the resulting data set."
    },
    "EffyMethod 22": {
        "scope": "javascript",
        "prefix": "Efficy.consultManyVl(contextHandle, findFields, orderByFields, findValues, forceRefresh)",
        "body": "Efficy.consultManyVl(${1:contextHandle}, ${2:findFields}, ${3:orderByFields}, ${4:findValues}, ${5:forceRefresh});\n",
        "description": "Deprecated since Efficy 11 Selects records that exactly match certain field values and returns the resulting data set. (Using TValueList) "
    },
    "EffyMethod 23": {
        "scope": "javascript",
        "prefix": "Efficy.consultQuery(queryHandle, contextHandle, master, detail, queryParams, forceRefresh, getAllRecords, queryViewText, maxUsedDays, topRows)",
        "body": "Efficy.consultQuery(${1:queryHandle}, ${2:contextHandle}, ${3:master}, ${4:detail}, ${5:queryParams}, ${6:forceRefresh}, ${7:getAllRecords}, ${8:queryViewText}, ${9:maxUsedDays}, ${10:topRows});\n",
        "description": "Runs a database query and returns the results in a data set."
    },
    "EffyMethod 24": {
        "scope": "javascript",
        "prefix": "Efficy.consultQueryVl(queryHandle, contextHandle, master, detail, queryParams, forceRefresh, getAllRecords, queryViewText, maxUsedDays, topRows)",
        "body": "Efficy.consultQueryVl(${1:queryHandle}, ${2:contextHandle}, ${3:master}, ${4:detail}, ${5:queryParams}, ${6:forceRefresh}, ${7:getAllRecords}, ${8:queryViewText}, ${9:maxUsedDays}, ${10:topRows});\n",
        "description": "Deprecated since Efficy 11 Runs a database query and returns the results in a data set. (Using TValueList)"
    },
    "EffyMethod 25": {
        "scope": "javascript",
        "prefix": "Efficy.consultRecent(entity, extraFields, gridName)",
        "body": "Efficy.consultRecent(${1:entity}, ${2:extraFields}, ${3:gridName});\n",
        "description": "Retrieves the recent list."
    },
    "EffyMethod 26": {
        "scope": "javascript",
        "prefix": "Efficy.consultTaskList(queryHandle, date, userIDs, activeUser, showPast, queryView, showUpcoming)",
        "body": "Efficy.consultTaskList(${1:queryHandle}, ${2:date}, ${3:userIDs}, ${4:activeUser}, ${5:showPast}, ${6:queryView}, ${7:showUpcoming});\n",
        "description": "Retrieves the task list for the specified date and userIDs."
    },
    "EffyMethod 27": {
        "scope": "javascript",
        "prefix": "Efficy.contextEncode(s, contexts)",
        "body": "Efficy.contextEncode(${1:s}, ${2:contexts});\n",
        "description": "Deprecated since Efficy 11.1 Encodes a string for one or multiple output contexts.\nUse the identical contextEncode() instead, which is now available without the Efficy prefix."
    },
    "EffyMethod 28": {
        "scope": "javascript",
        "prefix": "Efficy.convertAttachmentToPdf(EditHandle, fileId, version)",
        "body": "Efficy.convertAttachmentToPdf(${1:EditHandle}, ${2:fileId}, ${3:version});\n",
        "description": "Converts the attachment identified by a fileId and a version into a PDF file and returns the key (K_FILE) to the PDF attachment."
    },
    "EffyMethod 29": {
        "scope": "javascript",
        "prefix": "Efficy.copyDetails(EditHandle, sourceEditHandle, details, mainRelationOnly, onlyModifiedDetails)",
        "body": "Efficy.copyDetails(${1:EditHandle}, ${2:sourceEditHandle}, ${3:details}, ${4:mainRelationOnly}, ${5:onlyModifiedDetails});\n",
        "description": "Copies data from another open edit context, not necessarily on the same entity."
    },
    "EffyMethod 30": {
        "scope": "javascript",
        "prefix": "Efficy.copyDetails2(EditHandle, sourceEntity, key, details, mainRelationOnly, onlyModifiedDetails)",
        "body": "Efficy.copyDetails2(${1:EditHandle}, ${2:sourceEntity}, ${3:key}, ${4:details}, ${5:mainRelationOnly}, ${6:onlyModifiedDetails});\n",
        "description": "Copies data from a database record, not necessarily on the same entity.\nThis is equivalent to opening the source entity and calling Efficy.copyDetails()."
    },
    "EffyMethod 31": {
        "scope": "javascript",
        "prefix": "Efficy.copyFromExisting(EditHandle, key, minIndex, maxIndex)",
        "body": "Efficy.copyFromExisting(${1:EditHandle}, ${2:key}, ${3:minIndex}, ${4:maxIndex});\n",
        "description": "Copies data from an existing record in the database. The same entity as the current edit context is assumed.\nThe table views within the index range minIndex to maxIndex are copied. By default, all table views are copied.\nTo copy a single detail, obtain the table view index using Efficy.indexFromDetail() and use this value as minIndex and maxIndex."
    },
    "EffyMethod 32": {
        "scope": "javascript",
        "prefix": "Efficy.createAttachmentRevision(EditHandle, fileId, version)",
        "body": "Efficy.createAttachmentRevision(${1:EditHandle}, ${2:fileId}, ${3:version});\n",
        "description": "Adds a new version of the attachment identified by a fileId and a version.\nThe return value is the new version number."
    },
    "EffyMethod 33": {
        "scope": "javascript",
        "prefix": "Efficy.createSharingToken(entity, key, version, daysValid, param1, param2)",
        "body": "Efficy.createSharingToken(${1:entity}, ${2:key}, ${3:version}, ${4:daysValid}, ${5:param1}, ${6:param2});\n",
        "description": "Generates a URL for external document sharing."
    },
    "EffyMethod 34": {
        "scope": "javascript",
        "prefix": "Efficy.createTokenUrl(entity, tokenValue)",
        "body": "Efficy.createTokenUrl(${1:entity}, ${2:tokenValue});\n",
        "description": "Since Efficy 11.2 Generates a URL for external document sharing, based on an existing token"
    },
    "EffyMethod 35": {
        "scope": "javascript",
        "prefix": "Efficy.currentCustomerProfile()",
        "body": "undefined;\n",
        "description": "Since Efficy 11.1 Retrieves the current customer profile of the session."
    },
    "EffyMethod 36": {
        "scope": "javascript",
        "prefix": "Efficy.currentDatabaseAlias()",
        "body": "undefined;\n",
        "description": "Retrieves the alias (name) of the currently connected database."
    },
    "EffyMethod 37": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserCode()",
        "body": "undefined;\n",
        "description": "Retrieves the user code of the current user."
    },
    "EffyMethod 38": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserContactId()",
        "body": "undefined;\n",
        "description": "Retrieves the contact key of the current user. This value only makes sense for contact users, for others the value is 0."
    },
    "EffyMethod 39": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserFullName()",
        "body": "undefined;\n",
        "description": "Retrieves the current user's full name."
    },
    "EffyMethod 40": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserGroups()",
        "body": "undefined;\n",
        "description": "Retrieves the array of groups to which the current user belongs."
    },
    "EffyMethod 41": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserGroupsVl(values)",
        "body": "Efficy.currentUserGroupsVl(${1:values});\n",
        "description": "Deprecated since Efficy 11 Retrieves the array of groups to which the current user belongs. (Using TValueList)"
    },
    "EffyMethod 42": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserId",
        "body": "Efficy.currentUserId;\n",
        "description": "Retrieves the ID (key) of the current user."
    },
    "EffyMethod 42+": {
        "scope": "javascript",
        "prefix": "me",
        "body": "Efficy.currentUserId;\n",
        "description": "Retrieves the ID (key) of the current user."
    },
    "EffyMethod 42++": {
        "scope": "javascript",
        "prefix": "Efficy.CurrentUserId",
        "body": "Efficy.currentUserId;\n",
        "description": "Retrieves the ID (key) of the current user."
    },
    "EffyMethod 43": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserRole(allowForced)",
        "body": "Efficy.currentUserRole(${1:allowForced});\n",
        "description": "Since Efficy 11.2 Retrieves the current user's role."
    },
    "EffyMethod 44": {
        "scope": "javascript",
        "prefix": "Efficy.databaseLicenseName()",
        "body": "undefined;\n",
        "description": "Retrieves the license name of the currently connected database."
    },
    "EffyMethod 45": {
        "scope": "javascript",
        "prefix": "Efficy.dbEngine()",
        "body": "undefined;\n",
        "description": "Returns the type of the database engine.Possible values: \"OR\" (Oracle), \"MS\" (Microsoft SQL Server) and \"FB\" (Firebird)."
    },
    "EffyMethod 46": {
        "scope": "javascript",
        "prefix": "Efficy.deactivateCategory(EditHandle, category)",
        "body": "Efficy.deactivateCategory(${1:EditHandle}, ${2:category});\n",
        "description": "Since Efficy 11.2 Deactivates a category in the edit context. If the user does not have the appropriate rights on the category, an exception is thrown."
    },
    "EffyMethod 47": {
        "scope": "javascript",
        "prefix": "Efficy.deactivateExtranetAccess(contactId)",
        "body": "Efficy.deactivateExtranetAccess(${1:contactId});\n",
        "description": "Since Efficy 11.2 Removes access to the extranet for a given contactId."
    },
    "EffyMethod 48": {
        "scope": "javascript",
        "prefix": "Efficy.deleteDetail(EditHandle, detail, detailKey, relationId)",
        "body": "Efficy.deleteDetail(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId});\n",
        "description": "Deletes the detail relation identified by a detail, a detailKey and optionally a relationId (if multiple relations are available)."
    },
    "EffyMethod 49": {
        "scope": "javascript",
        "prefix": "Efficy.deleteEntity(entity, keyList)",
        "body": "Efficy.deleteEntity(${1:entity}, ${2:keyList});\n",
        "description": "Deletes records."
    },
    "EffyMethod 50": {
        "scope": "javascript",
        "prefix": "Efficy.deleteLink(entity, detail, key, detailKeyList)",
        "body": "Efficy.deleteLink(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKeyList});\n",
        "description": "Removes database relations without using an edit context."
    },
    "EffyMethod 51": {
        "scope": "javascript",
        "prefix": "Efficy.deleteLinkVl(entity, detail, key, detailKeyList)",
        "body": "Efficy.deleteLinkVl(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKeyList});\n",
        "description": "Deprecated since Efficy 11 Removes database relations without using an edit context. (Using TValueList)"
    },
    "EffyMethod 52": {
        "scope": "javascript",
        "prefix": "Efficy.deleteVl(entity, keyList)",
        "body": "Efficy.deleteVl(${1:entity}, ${2:keyList});\n",
        "description": "Deprecated since Efficy 11 Deletes records. (Using TValueList)"
    },
    "EffyMethod 53": {
        "scope": "javascript",
        "prefix": "Efficy.detailExists(EditHandle, detail)",
        "body": "Efficy.detailExists(${1:EditHandle}, ${2:detail});\n",
        "description": "Tests whether the detail entity is available in the edit context."
    },
    "EffyMethod 54": {
        "scope": "javascript",
        "prefix": "Efficy.detailModified(EditHandle, detail)",
        "body": "Efficy.detailModified(${1:EditHandle}, ${2:detail});\n",
        "description": "Tests whether the detail data set has been modified since the beginning of the edit operation by inserting\n or deleting records, or updating field values.The value is reset when Efficy.commitChanges() is executed."
    },
    "EffyMethod 55": {
        "scope": "javascript",
        "prefix": "Efficy.detectConflictInAgenda(EditHandle, checkOldValues)",
        "body": "Efficy.detectConflictInAgenda(${1:EditHandle}, ${2:checkOldValues});\n",
        "description": "Returns list of users for which there was a conflicting action."
    },
    "EffyMethod 56": {
        "scope": "javascript",
        "prefix": "Efficy.detectConflictInAgendaAsNames(EditHandle, checkOldValues)",
        "body": "Efficy.detectConflictInAgendaAsNames(${1:EditHandle}, ${2:checkOldValues});\n",
        "description": "Returns list of user names for which there was a conflicting action."
    },
    "EffyMethod 57": {
        "scope": "javascript",
        "prefix": "Efficy.duplicateAttachment(EditHandle, fileId, version)",
        "body": "Efficy.duplicateAttachment(${1:EditHandle}, ${2:fileId}, ${3:version});\n",
        "description": "Duplicates the attachment identified by a fileId and a version and returns the key (K_FILE). Attachment revisions are 0-based."
    },
    "EffyMethod 58": {
        "scope": "javascript",
        "prefix": "Efficy.eMailOutFromEditing(mailEditHandle, sourceEditHandle, emailTemplate, mailField, attachmentList, addLinkedDocuments)",
        "body": "Efficy.eMailOutFromEditing(${1:mailEditHandle}, ${2:sourceEditHandle}, ${3:emailTemplate}, ${4:mailField}, ${5:attachmentList}, ${6:addLinkedDocuments});\n",
        "description": "Creates an email from a template and send it to the linked contacts or companies."
    },
    "EffyMethod 59": {
        "scope": "javascript",
        "prefix": "Efficy.entityFromContext(contextHandle)",
        "body": "Efficy.entityFromContext(${1:contextHandle});\n",
        "description": "Returns the entity used in the context handle."
    },
    "EffyMethod 60": {
        "scope": "javascript",
        "prefix": "Efficy.execSql(sql, queryParams, invalidateConnection)",
        "body": "Efficy.execSql(${1:sql}, ${2:queryParams}, ${3:invalidateConnection});\n",
        "description": "Executes a SQL command in the database that does not return a data set.\nThis method is typically used for update or delete SQL."
    },
    "EffyMethod 61": {
        "scope": "javascript",
        "prefix": "Efficy.executeOdbcQuery(queryHandle, contextHandle, connection, sql, forceRefresh, getAllRecords, storeId)",
        "body": "Efficy.executeOdbcQuery(${1:queryHandle}, ${2:contextHandle}, ${3:connection}, ${4:sql}, ${5:forceRefresh}, ${6:getAllRecords}, ${7:storeId});\n",
        "description": "Runs an ODBC query – a native (SQL) database query – and returns the results in a data set."
    },
    "EffyMethod 62": {
        "scope": "javascript",
        "prefix": "Efficy.executeQueryWithoutContext(queryHandle, master, detail, queryParams, forceRefresh, getAllRecords)",
        "body": "Efficy.executeQueryWithoutContext(${1:queryHandle}, ${2:master}, ${3:detail}, ${4:queryParams}, ${5:forceRefresh}, ${6:getAllRecords});\n",
        "description": "Equivalent to Efficy.openTemporaryContext() and Efficy.consultQuery()."
    },
    "EffyMethod 63": {
        "scope": "javascript",
        "prefix": "Efficy.executeQueryWithoutContextVl(queryHandle, master, detail, queryParams, forceRefresh, getAllRecords)",
        "body": "Efficy.executeQueryWithoutContextVl(${1:queryHandle}, ${2:master}, ${3:detail}, ${4:queryParams}, ${5:forceRefresh}, ${6:getAllRecords});\n",
        "description": "Deprecated since Efficy 11 Equivalent to Efficy.openTemporaryContext() and Efficy.consultQuery(). (Using TValueList)"
    },
    "EffyMethod 64": {
        "scope": "javascript",
        "prefix": "Efficy.executeSystemSqlQuery(queryHandle, contextHandle, sql, queryParams, forceRefresh, getAllRecords, storeId)",
        "body": "Efficy.executeSystemSqlQuery(${1:queryHandle}, ${2:contextHandle}, ${3:sql}, ${4:queryParams}, ${5:forceRefresh}, ${6:getAllRecords}, ${7:storeId});\n",
        "description": "Runs a native (SQL) database query and return the results in a data set."
    },
    "EffyMethod 65": {
        "scope": "javascript",
        "prefix": "Efficy.explodeGroups(users, includeInactive)",
        "body": "Efficy.explodeGroups(${1:users}, ${2:includeInactive});\n",
        "description": "Since Efficy 11.3 Explode user groups into the team members, returns the result as a list of users separated by semicolon (;)."
    },
    "EffyMethod 66": {
        "scope": "javascript",
        "prefix": "Efficy.exportReport(EditHandle, k_Report, reportFormat, parameters)",
        "body": "Efficy.exportReport(${1:EditHandle}, ${2:k_Report}, ${3:reportFormat}, ${4:parameters});\n",
        "description": "Inserts the generated report and returns the key (K_FILE)."
    },
    "EffyMethod 67": {
        "scope": "javascript",
        "prefix": "Efficy.exportReportToFile(k_Report, reportFormat, parameters)",
        "body": "Efficy.exportReportToFile(${1:k_Report}, ${2:reportFormat}, ${3:parameters});\n",
        "description": "Same as Efficy.exportReport(), returns the path of the generated report."
    },
    "EffyMethod 68": {
        "scope": "javascript",
        "prefix": "Efficy.extractFile(EditHandle, fileId, version, fileName)",
        "body": "Efficy.extractFile(${1:EditHandle}, ${2:fileId}, ${3:version}, ${4:fileName});\n",
        "description": "Since Efficy 11 Uncompress and saves the content of an attachment to a file. Only inserted files are supported."
    },
    "EffyMethod 69": {
        "scope": "javascript",
        "prefix": "Efficy.fieldModified(EditHandle, tableViewIndex, fieldName)",
        "body": "Efficy.fieldModified(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldName});\n",
        "description": "Tests whether a field value of a master data set has been modified since the beginning of the edit operation.\nThe value is reset when Efficy.commitChanges() is executed."
    },
    "EffyMethod 70": {
        "scope": "javascript",
        "prefix": "Efficy.findContactsFromEMails(recipients)",
        "body": "Efficy.findContactsFromEMails(${1:recipients});\n",
        "description": "Since Efficy 11.2 Returns an array containing all the Contacts having one of the e-mail provided in their e-mail fields\n (or in the Cont_Comp relation)."
    },
    "EffyMethod 71": {
        "scope": "javascript",
        "prefix": "Efficy.forceUserRole(roleId)",
        "body": "Efficy.forceUserRole(${1:roleId});\n",
        "description": "Changes the current user role to set other default securities when inserting records."
    },
    "EffyMethod 72": {
        "scope": "javascript",
        "prefix": "Efficy.generateExtranetPassword(contactId, extCode, requireChangeAtLogin)",
        "body": "Efficy.generateExtranetPassword(${1:contactId}, ${2:extCode}, ${3:requireChangeAtLogin});\n",
        "description": "Generates a new password for an extranet (Contact) user and insert a corresponding record in ACC_AUTH table the database."
    },
    "EffyMethod 73": {
        "scope": "javascript",
        "prefix": "Efficy.generateExtranetPasswordUrl(contactId, extCode, language)",
        "body": "Efficy.generateExtranetPasswordUrl(${1:contactId}, ${2:extCode}, ${3:language});\n",
        "description": "Generates an URL to a password registration page for an extranet (Contact) user."
    },
    "EffyMethod 74": {
        "scope": "javascript",
        "prefix": "Efficy.generateProposal(targetContext, sourceContext, mergeArguments, asPdf)",
        "body": "Efficy.generateProposal(${1:targetContext}, ${2:sourceContext}, ${3:mergeArguments}, ${4:asPdf});\n",
        "description": "Since Efficy 11 Generates the Spreadsheet Proposal docx based on the current spreadsheet template and linked products."
    },
    "EffyMethod 75": {
        "scope": "javascript",
        "prefix": "Efficy.generateSysToken()",
        "body": "undefined;\n",
        "description": "Since Efficy 2020 "
    },
    "EffyMethod 76": {
        "scope": "javascript",
        "prefix": "Efficy.getAccountKind(userId)",
        "body": "Efficy.getAccountKind(${1:userId});\n",
        "description": "Retrieves the account type of userId.0 = user, 1 = group, 2 = resource, 3 = team."
    },
    "EffyMethod 77": {
        "scope": "javascript",
        "prefix": "Efficy.getCategories(contextHandle, selectedCategories, includePanels)",
        "body": "Efficy.getCategories(${1:contextHandle}, ${2:selectedCategories}, ${3:includePanels});\n",
        "description": "Retrieves activated categories."
    },
    "EffyMethod 78": {
        "scope": "javascript",
        "prefix": "Efficy.getCategoryDataSet(contextHandle, categoryName)",
        "body": "Efficy.getCategoryDataSet(${1:contextHandle}, ${2:categoryName});\n",
        "description": "Retrieves the data set for category categoryName. Can be null when the category is not available to the current user.\nCheck TDataSet.isEmpty() to make sure the category is selected for the current record."
    },
    "EffyMethod 79": {
        "scope": "javascript",
        "prefix": "Efficy.getCategoryFieldValue(contextHandle, category, fieldName)",
        "body": "Efficy.getCategoryFieldValue(${1:contextHandle}, ${2:category}, ${3:fieldName});\n",
        "description": "Retrieves the value for field fieldName of the specified category of the consulted entity. Use for non-string fields only."
    },
    "EffyMethod 80": {
        "scope": "javascript",
        "prefix": "Efficy.getCategoryStringFieldValue(contextHandle, category, fieldName)",
        "body": "Efficy.getCategoryStringFieldValue(${1:contextHandle}, ${2:category}, ${3:fieldName});\n",
        "description": "Deprecated since Efficy 11 Retrieves the value for field fieldName of the specified category of the consulted entity. Use for string fields."
    },
    "EffyMethod 81": {
        "scope": "javascript",
        "prefix": "Efficy.getContactKeyForUser(userId)",
        "body": "Efficy.getContactKeyForUser(${1:userId});\n",
        "description": "Retrieves the contact key of the user userId. This value only makes sense for contact users, for others the value is 0."
    },
    "EffyMethod 82": {
        "scope": "javascript",
        "prefix": "Efficy.getDetailDataSet(EditHandle, detail)",
        "body": "Efficy.getDetailDataSet(${1:EditHandle}, ${2:detail});\n",
        "description": "Retrieves a relation data set for the specified detail in the edit context."
    },
    "EffyMethod 83": {
        "scope": "javascript",
        "prefix": "Efficy.getDetailField(EditHandle, detail, detailKey, relationId, fieldName)",
        "body": "Efficy.getDetailField(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId}, ${5:fieldName});\n",
        "description": "Retrieves the value for a relation field of any type."
    },
    "EffyMethod 84": {
        "scope": "javascript",
        "prefix": "Efficy.getDetailStringField(EditHandle, detail, detailKey, relationId, fieldName)",
        "body": "Efficy.getDetailStringField(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId}, ${5:fieldName});\n",
        "description": "Deprecated since Efficy 11 Retrieves the value for a relation field of type string."
    },
    "EffyMethod 85": {
        "scope": "javascript",
        "prefix": "Efficy.getDurationDisplay(duration, activeHours, forcedFormat, dhmsUnits)",
        "body": "Efficy.getDurationDisplay(${1:duration}, ${2:activeHours}, ${3:forcedFormat}, ${4:dhmsUnits});\n",
        "description": "Since Efficy 11.2 "
    },
    "EffyMethod 86": {
        "scope": "javascript",
        "prefix": "Efficy.getEditEntity(EditHandle)",
        "body": "Efficy.getEditEntity(${1:EditHandle});\n",
        "description": "Retrieves the entity handle from an edit context."
    },
    "EffyMethod 87": {
        "scope": "javascript",
        "prefix": "Efficy.getEditKey(EditHandle)",
        "body": "Efficy.getEditKey(${1:EditHandle});\n",
        "description": "Retrieves the main item key of the edit context."
    },
    "EffyMethod 87+": {
        "scope": "javascript",
        "prefix": "gek",
        "body": "Efficy.getEditKey(${1:EditHandle});\n",
        "description": "Retrieves the main item key of the edit context."
    },
    "EffyMethod 88": {
        "scope": "javascript",
        "prefix": "Efficy.getExtranetUserName(contactId, createUserNameIfEmpty)",
        "body": "Efficy.getExtranetUserName(${1:contactId}, ${2:createUserNameIfEmpty});\n",
        "description": "Retrieves the extranet user code for a Contact."
    },
    "EffyMethod 89": {
        "scope": "javascript",
        "prefix": "Efficy.getFieldDisplayLabel(tableId, fieldId)",
        "body": "Efficy.getFieldDisplayLabel(${1:tableId}, ${2:fieldId});\n",
        "description": "Since Efficy 11.2 Retrieves the label for a field fieldId.\nIt is recommended to use Efficy.getFieldDisplayLabel2() instead to avoid using \"magic numbers\"."
    },
    "EffyMethod 90": {
        "scope": "javascript",
        "prefix": "Efficy.getFieldDisplayLabel2(tableId, fieldName)",
        "body": "Efficy.getFieldDisplayLabel2(${1:tableId}, ${2:fieldName});\n",
        "description": "Since Efficy 11.2 Retrieves the label for a field fieldName."
    },
    "EffyMethod 91": {
        "scope": "javascript",
        "prefix": "Efficy.getFieldStringValue(contextHandle, fieldName, tableViewIndex)",
        "body": "Efficy.getFieldStringValue(${1:contextHandle}, ${2:fieldName}, ${3:tableViewIndex});\n",
        "description": "Retrieves the value for a field of type string."
    },
    "EffyMethod 92": {
        "scope": "javascript",
        "prefix": "Efficy.getFieldValue(contextHandle, fieldName)",
        "body": "Efficy.getFieldValue(${1:contextHandle}, ${2:fieldName});\n",
        "description": "Retrieves the value for a field of any type."
    },
    "EffyMethod 92+": {
        "scope": "javascript",
        "prefix": "gfv",
        "body": "Efficy.getFieldValue(${1:contextHandle}, ${2:fieldName});\n",
        "description": "Retrieves the value for a field of any type."
    },
    "EffyMethod 93": {
        "scope": "javascript",
        "prefix": "Efficy.getFileStream(EditHandle, fileDs)",
        "body": "Efficy.getFileStream(${1:EditHandle}, ${2:fileDs});\n",
        "description": "Since Efficy 11.2 Retrieves the binary stream of a file. Depending on the file kind (FILES.KIND field), the function will return the stream stored in FILES.STREAM, load a remote file or download a large file from the Servicy file server."
    },
    "EffyMethod 94": {
        "scope": "javascript",
        "prefix": "Efficy.getFlexmailAccountsForCurrentUser()",
        "body": "undefined;\n",
        "description": "Retrieves the active Flexmail accounts for the current user."
    },
    "EffyMethod 95": {
        "scope": "javascript",
        "prefix": "Efficy.getFlexmailInfo(k_Flexmail)",
        "body": "Efficy.getFlexmailInfo(${1:k_Flexmail});\n",
        "description": "Retrieves FlexId, FlexToken, FlexUser and FlexPassword of a Flexmail account."
    },
    "EffyMethod 96": {
        "scope": "javascript",
        "prefix": "Efficy.getGroupMemberList(groupId, list)",
        "body": "Efficy.getGroupMemberList(${1:groupId}, ${2:list});\n",
        "description": "Retrieves the keys of members of a group in a list."
    },
    "EffyMethod 97": {
        "scope": "javascript",
        "prefix": "Efficy.getLookupKeyFromValue(tableId, fieldName, value)",
        "body": "Efficy.getLookupKeyFromValue(${1:tableId}, ${2:fieldName}, ${3:value});\n",
        "description": "Returns the look-up key value for a look-up label."
    },
    "EffyMethod 98": {
        "scope": "javascript",
        "prefix": "Efficy.getLookupKeyFromValue2(tableName, fieldName, value, searchInTranslations)",
        "body": "Efficy.getLookupKeyFromValue2(${1:tableName}, ${2:fieldName}, ${3:value}, ${4:searchInTranslations});\n",
        "description": "Retrieves the key in a lookup table from the value of one field."
    },
    "EffyMethod 99": {
        "scope": "javascript",
        "prefix": "Efficy.getLookupValueFromKey(tableId, fieldName, key)",
        "body": "Efficy.getLookupValueFromKey(${1:tableId}, ${2:fieldName}, ${3:key});\n",
        "description": "Returns the look-up key text for a look-up key."
    },
    "EffyMethod 100": {
        "scope": "javascript",
        "prefix": "Efficy.getLookupValueFromKey2(tableName, fieldName, key, forcedLanguage)",
        "body": "Efficy.getLookupValueFromKey2(${1:tableName}, ${2:fieldName}, ${3:key}, ${4:forcedLanguage});\n",
        "description": "Retrieves the value in a lookup table from its key.If the main value field is specified then the\n translated value for session language is returned. If empty then the default language (English) is returned."
    },
    "EffyMethod 101": {
        "scope": "javascript",
        "prefix": "Efficy.getMainDetail(EditHandle, detail)",
        "body": "Efficy.getMainDetail(${1:EditHandle}, ${2:detail});\n",
        "description": "Retrieves the main detail record for the specified detail relation.Returns 0 if no main detail exists."
    },
    "EffyMethod 101+": {
        "scope": "javascript",
        "prefix": "gmd",
        "body": "Efficy.getMainDetail(${1:EditHandle}, ${2:detail});\n",
        "description": "Retrieves the main detail record for the specified detail relation.Returns 0 if no main detail exists."
    },
    "EffyMethod 102": {
        "scope": "javascript",
        "prefix": "Efficy.getMasterDataSet(EditHandle, tableViewIndex)",
        "body": "Efficy.getMasterDataSet(${1:EditHandle}, ${2:tableViewIndex});\n",
        "description": "Retrieves a master data set from the edit context."
    },
    "EffyMethod 103": {
        "scope": "javascript",
        "prefix": "Efficy.getMultiValueLabels(tableId, fieldName, value, separator)",
        "body": "Efficy.getMultiValueLabels(${1:tableId}, ${2:fieldName}, ${3:value}, ${4:separator});\n",
        "description": "Converts the look-up keys for a multi-value field to labels using the look-up table for the field."
    },
    "EffyMethod 104": {
        "scope": "javascript",
        "prefix": "Efficy.getOwner(EditHandle)",
        "body": "Efficy.getOwner(${1:EditHandle});\n",
        "description": "Retrieves the key of the owner of the record."
    },
    "EffyMethod 105": {
        "scope": "javascript",
        "prefix": "Efficy.getQueryDataSet(queryHandle)",
        "body": "Efficy.getQueryDataSet(${1:queryHandle});\n",
        "description": "Retrieves the cached data set from a query handle."
    },
    "EffyMethod 106": {
        "scope": "javascript",
        "prefix": "Efficy.getReferenceToGenerate(EditHandle)",
        "body": "Efficy.getReferenceToGenerate(${1:EditHandle});\n",
        "description": "In BeforeCommit events, retrieves the key of the reference that will be applied when committing the edit context."
    },
    "EffyMethod 107": {
        "scope": "javascript",
        "prefix": "Efficy.getSearchFields(entity)",
        "body": "Efficy.getSearchFields(${1:entity});\n",
        "description": "Gets the fields of entity you can search for."
    },
    "EffyMethod 108": {
        "scope": "javascript",
        "prefix": "Efficy.getSetting(module, aName, asString)",
        "body": "Efficy.getSetting(${1:module}, ${2:aName}, ${3:asString});\n",
        "description": "Since Efficy 11.2 Retrieves the current value of a given Efficy setting."
    },
    "EffyMethod 109": {
        "scope": "javascript",
        "prefix": "Efficy.getSysSettingsValue(aName)",
        "body": "Efficy.getSysSettingsValue(${1:aName});\n",
        "description": "Since Efficy 11.2 Retrieves a value from the database table \"SYS_SETTINGS\"."
    },
    "EffyMethod 110": {
        "scope": "javascript",
        "prefix": "Efficy.getSysStorageValue(aName)",
        "body": "Efficy.getSysStorageValue(${1:aName});\n",
        "description": "Retrieves a value from the database table \"SYS_STORAGE\"."
    },
    "EffyMethod 111": {
        "scope": "javascript",
        "prefix": "Efficy.getTranslatedFieldLabel(tableId, fieldName, language)",
        "body": "Efficy.getTranslatedFieldLabel(${1:tableId}, ${2:fieldName}, ${3:language});\n",
        "description": "Since Efficy 11.3 Retrieves the label of a field, translated in a specific language."
    },
    "EffyMethod 112": {
        "scope": "javascript",
        "prefix": "Efficy.getUserCode(userId)",
        "body": "Efficy.getUserCode(${1:userId});\n",
        "description": "Retrieves the code of the user userId."
    },
    "EffyMethod 113": {
        "scope": "javascript",
        "prefix": "Efficy.getUserId(userCode)",
        "body": "Efficy.getUserId(${1:userCode});\n",
        "description": "Retrieves the ID (key) of the user userCode."
    },
    "EffyMethod 114": {
        "scope": "javascript",
        "prefix": "Efficy.getUserLanguage(userId)",
        "body": "Efficy.getUserLanguage(${1:userId});\n",
        "description": "Since Efficy 11.3 Retrieves the language of the user userId."
    },
    "EffyMethod 115": {
        "scope": "javascript",
        "prefix": "Efficy.getUserName(userId)",
        "body": "Efficy.getUserName(${1:userId});\n",
        "description": "Retrieves the full name of the user userId."
    },
    "EffyMethod 116": {
        "scope": "javascript",
        "prefix": "Efficy.getUserNameFromCode(userCode)",
        "body": "Efficy.getUserNameFromCode(${1:userCode});\n",
        "description": "Retrieves the full name of the user userCode."
    },
    "EffyMethod 117": {
        "scope": "javascript",
        "prefix": "Efficy.getUserNotification(entity)",
        "body": "Efficy.getUserNotification(${1:entity});\n",
        "description": "Since Efficy 11.3 Retrieves the user's default notifications configuration as a mask (configured in Default Notifications pages)."
    },
    "EffyMethod 118": {
        "scope": "javascript",
        "prefix": "Efficy.getUserProperty(userId, propName)",
        "body": "Efficy.getUserProperty(${1:userId}, ${2:propName});\n",
        "description": "Since Efficy 11.3 Retrieves a property for a user."
    },
    "EffyMethod 119": {
        "scope": "javascript",
        "prefix": "Efficy.hasRightOnTable(entity, operation)",
        "body": "Efficy.hasRightOnTable(${1:entity}, ${2:operation});\n",
        "description": "Tests whether the current user has the right to perform a certain operation on an entity."
    },
    "EffyMethod 120": {
        "scope": "javascript",
        "prefix": "Efficy.hasSecurity(contextHandle, securityCode)",
        "body": "Efficy.hasSecurity(${1:contextHandle}, ${2:securityCode});\n",
        "description": "Since Efficy 11.3 Tests whether the current user has a certain security on an edit/consult context."
    },
    "EffyMethod 121": {
        "scope": "javascript",
        "prefix": "Efficy.hasTeamRole(teamKind, roles, forcePlayer)",
        "body": "Efficy.hasTeamRole(${1:teamKind}, ${2:roles}, ${3:forcePlayer});\n",
        "description": "Since Efficy 11.3 Tests whether the current user is part of Team with a certain role."
    },
    "EffyMethod 122": {
        "scope": "javascript",
        "prefix": "Efficy.indexFromCategory(EditHandle, category)",
        "body": "Efficy.indexFromCategory(${1:EditHandle}, ${2:category});\n",
        "description": "Retrieves the table view index of a category in the edit context."
    },
    "EffyMethod 123": {
        "scope": "javascript",
        "prefix": "Efficy.indexFromDetail(EditHandle, detail)",
        "body": "Efficy.indexFromDetail(${1:EditHandle}, ${2:detail});\n",
        "description": "Retrieves the table view index of a detail entity in the edit context."
    },
    "EffyMethod 124": {
        "scope": "javascript",
        "prefix": "Efficy.insertAttachment(EditHandle, attachedFileType, path)",
        "body": "Efficy.insertAttachment(${1:EditHandle}, ${2:attachedFileType}, ${3:path});\n",
        "description": "Inserts an attached file and returns the key (K_FILE)."
    },
    "EffyMethod 125": {
        "scope": "javascript",
        "prefix": "Efficy.insertDetail(EditHandle, detail, detailKey, relationId, linkMainComp)",
        "body": "Efficy.insertDetail(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId}, ${5:linkMainComp});\n",
        "description": "Inserts a detail relation in the edit context."
    },
    "EffyMethod 126": {
        "scope": "javascript",
        "prefix": "Efficy.insertDetail2(EditHandle, detail, detailKey, linkMainComp)",
        "body": "Efficy.insertDetail2(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:linkMainComp});\n",
        "description": "Inserts a detail relation in the edit context."
    },
    "EffyMethod 126+": {
        "scope": "javascript",
        "prefix": "id2",
        "body": "Efficy.insertDetail2(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:linkMainComp});\n",
        "description": "Inserts a detail relation in the edit context."
    },
    "EffyMethod 127": {
        "scope": "javascript",
        "prefix": "Efficy.isConfidential(EditHandle)",
        "body": "Efficy.isConfidential(${1:EditHandle});\n",
        "description": "Tests whether the edited record is confidential (only the owner has visibility on the record)."
    },
    "EffyMethod 128": {
        "scope": "javascript",
        "prefix": "Efficy.isCurrentUserInGroup(groupId)",
        "body": "Efficy.isCurrentUserInGroup(${1:groupId});\n",
        "description": "Tests whether the current user belongs to the group groupId."
    },
    "EffyMethod 129": {
        "scope": "javascript",
        "prefix": "Efficy.isGroup(userId)",
        "body": "Efficy.isGroup(${1:userId});\n",
        "description": "Tests whether userId is a group."
    },
    "EffyMethod 130": {
        "scope": "javascript",
        "prefix": "Efficy.isGroupMember(userId, groupId)",
        "body": "Efficy.isGroupMember(${1:userId}, ${2:groupId});\n",
        "description": "Tests whether userId belongs to the group groupId."
    },
    "EffyMethod 131": {
        "scope": "javascript",
        "prefix": "Efficy.isLookupFieldByReference(tableId, fieldName)",
        "body": "Efficy.isLookupFieldByReference(${1:tableId}, ${2:fieldName});\n",
        "description": "Tests whether the field is a look-up field by reference (using look-up keys instead of labels)."
    },
    "EffyMethod 132": {
        "scope": "javascript",
        "prefix": "Efficy.isRecentRecorded(entity)",
        "body": "Efficy.isRecentRecorded(${1:entity});\n",
        "description": "Tests whether a list of recent items is kept for the specified entity."
    },
    "EffyMethod 133": {
        "scope": "javascript",
        "prefix": "Efficy.isUserActive(userId)",
        "body": "Efficy.isUserActive(${1:userId});\n",
        "description": "Since Efficy 11.3 Returns true if the user is active."
    },
    "EffyMethod 134": {
        "scope": "javascript",
        "prefix": "Efficy.languageName(longName)",
        "body": "Efficy.languageName(${1:longName});\n",
        "description": "Returns the current user language as text."
    },
    "EffyMethod 135": {
        "scope": "javascript",
        "prefix": "Efficy.lockedByAccount(EditHandle)",
        "body": "Efficy.lockedByAccount(${1:EditHandle});\n",
        "description": "Retrieves the key of the user that have locked the record."
    },
    "EffyMethod 136": {
        "scope": "javascript",
        "prefix": "Efficy.log(msg)",
        "body": "Efficy.log(${1:msg});\n",
        "description": "While executing a scheduled script or a data synchronization script, the log function lets you add a string\n in the log file of the Data Sync tool or the Efficy service Task Scheduler."
    },
    "EffyMethod 136+": {
        "scope": "javascript",
        "prefix": "efl",
        "body": "Efficy.log(${1:msg});\n",
        "description": "While executing a scheduled script or a data synchronization script, the log function lets you add a string\n in the log file of the Data Sync tool or the Efficy service Task Scheduler."
    },
    "EffyMethod 137": {
        "scope": "javascript",
        "prefix": "Efficy.mergeEmailTemplate(EditHandle, idTemplate, mergeArguments, subject)",
        "body": "Efficy.mergeEmailTemplate(${1:EditHandle}, ${2:idTemplate}, ${3:mergeArguments}, ${4:subject});\n",
        "description": "Merges a document template (usually in HTML format) and returns the result as a string."
    },
    "EffyMethod 138": {
        "scope": "javascript",
        "prefix": "Efficy.mergeEmailTemplateVariant(EditHandle, idTemplate, mergeArguments)",
        "body": "Efficy.mergeEmailTemplateVariant(${1:EditHandle}, ${2:idTemplate}, ${3:mergeArguments});\n",
        "description": "Merges a document template (usually in HTML format) and returns the result as a varArray of strings with the subject."
    },
    "EffyMethod 139": {
        "scope": "javascript",
        "prefix": "Efficy.mergeEmailTemplateVariantVl(EditHandle, idTemplate, mergeArguments, values)",
        "body": "Efficy.mergeEmailTemplateVariantVl(${1:EditHandle}, ${2:idTemplate}, ${3:mergeArguments}, ${4:values});\n",
        "description": "Deprecated since Efficy 11 Merges a document template (usually in HTML format) and returns the result as a varArray of strings with the subject. (Using TValueList)"
    },
    "EffyMethod 140": {
        "scope": "javascript",
        "prefix": "Efficy.mergeTemplate(EditHandle, idTemplate, mergeArguments, pdfWithAttachments)",
        "body": "Efficy.mergeTemplate(${1:EditHandle}, ${2:idTemplate}, ${3:mergeArguments}, ${4:pdfWithAttachments});\n",
        "description": "Merges a document template and inserts the result as a new attachment. The return value is the key of the new attachment."
    },
    "EffyMethod 141": {
        "scope": "javascript",
        "prefix": "Efficy.mobileVersion()",
        "body": "undefined;\n",
        "description": "Returns the compatible version of mobile application."
    },
    "EffyMethod 142": {
        "scope": "javascript",
        "prefix": "Efficy.modified(EditHandle)",
        "body": "Efficy.modified(${1:EditHandle});\n",
        "description": "Tests whether any changes have been made in the edit context."
    },
    "EffyMethod 143": {
        "scope": "javascript",
        "prefix": "Efficy.oldCategoryFieldValue(EditHandle, category, fieldName)",
        "body": "Efficy.oldCategoryFieldValue(${1:EditHandle}, ${2:category}, ${3:fieldName});\n",
        "description": "Retrieves the initial value of a category data set field of any type at the start of the edit operation.\nThe values are reset when Efficy.commitChanges() is executed."
    },
    "EffyMethod 144": {
        "scope": "javascript",
        "prefix": "Efficy.oldCategoryStringFieldValue(EditHandle, category, fieldName)",
        "body": "Efficy.oldCategoryStringFieldValue(${1:EditHandle}, ${2:category}, ${3:fieldName});\n",
        "description": "Deprecated since Efficy 11 Retrieves the initial value of a category data set field of type string at the start of the edit operation.\nThe values are reset when Efficy.commitChanges() is executed."
    },
    "EffyMethod 145": {
        "scope": "javascript",
        "prefix": "Efficy.oldFieldValue(EditHandle, tableViewIndex, fieldName)",
        "body": "Efficy.oldFieldValue(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldName});\n",
        "description": "Retrieves the initial value of a master data set field of any type at the start of the edit operation.\nThe values are reset when Efficy.commitChanges() is executed."
    },
    "EffyMethod 146": {
        "scope": "javascript",
        "prefix": "Efficy.oldStringFieldValue(EditHandle, tableViewIndex, fieldName)",
        "body": "Efficy.oldStringFieldValue(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldName});\n",
        "description": "Deprecated since Efficy 11 Retrieves the initial value of a master data set field of type string at the start of the edit operation.\nThe values are reset when Efficy.commitChanges() is executed."
    },
    "EffyMethod 147": {
        "scope": "javascript",
        "prefix": "Efficy.openConsultContext(entity, forceNewContext, lockContext)",
        "body": "Efficy.openConsultContext(${1:entity}, ${2:forceNewContext}, ${3:lockContext});\n",
        "description": "Opens a consult context for the Entity.A context remains memory-resident (on the web server) until it is closed.\n Always match an Efficy.openConsultContext() with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 148": {
        "scope": "javascript",
        "prefix": "Efficy.openEditContext(entity, key, consultOnly)",
        "body": "Efficy.openEditContext(${1:entity}, ${2:key}, ${3:consultOnly});\n",
        "description": "Opens an edit context for the record identified by entity and key.A context remains memory-resident (on the web server)\n until it's destroyed again. Always match an Efficy.openEditContext() with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 148+": {
        "scope": "javascript",
        "prefix": "oec",
        "body": "try {\n\tvar ${1:name}Ctx = Efficy.openEditContext(nt${2:entity}, ${3:key}, ${4:consultOnly});\n${5}\n\tEfficy.commitChanges(${1}Ctx, false)\n} finally{\n\tEfficy.closeContext(${1:name}Ctx)\n}",
        "description": "Opens an edit context for the record identified by entity and key.A context remains memory-resident (on the web server)\n until it's destroyed again. Always match an Efficy.openEditContext() with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 149": {
        "scope": "javascript",
        "prefix": "Efficy.openEditContextRelation(entity, detail, key, detailKey, relationId)",
        "body": "Efficy.openEditContextRelation(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey}, ${5:relationId});\n",
        "description": "Opens an edit context for a relation. If the relation does not yet exist, it is created.A context remains memory-resident (on the web server)\n until it's destroyed again. Always match an Efficy.openEditContextRelation() with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 150": {
        "scope": "javascript",
        "prefix": "Efficy.openEditContextRelation2(entity, detail, key, detailKey)",
        "body": "Efficy.openEditContextRelation2(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey});\n",
        "description": "Opens an edit context for a relation. If the relation does not yet exist, it will be created.A context remains memory-resident (on the web server)\n until it's destroyed again. Always match an Efficy.openEditContextRelation2() with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 150+": {
        "scope": "javascript",
        "prefix": "oecr",
        "body": "var ${1:name}Ctx = Efficy.openEditContextRelation2(${2:entity}, ${3:detail}, ${4:key}, ${5:detailKey});\n",
        "description": "Opens an edit context for a relation. If the relation does not yet exist, it will be created.A context remains memory-resident (on the web server)\n until it's destroyed again. Always match an Efficy.openEditContextRelation2() with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 151": {
        "scope": "javascript",
        "prefix": "Efficy.openSearchContext(entity)",
        "body": "Efficy.openSearchContext(${1:entity});\n",
        "description": "Opens a consult (search) context for the entity.A context remains memory-resident (on the web server)\n until it's destroyed again. Always match an Efficy.openSearchContext() with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 152": {
        "scope": "javascript",
        "prefix": "Efficy.openTemporaryContext()",
        "body": "undefined;\n",
        "description": "Opens a temporary context without Entity. Typically used to run a Efficy.consultQuery() request.\nYou don't need to close the temporary context, Efficy handles this automatically!"
    },
    "EffyMethod 153": {
        "scope": "javascript",
        "prefix": "Efficy.openUrl(url, request)",
        "body": "Efficy.openUrl(${1:url}, ${2:request});\n",
        "description": "Sends a request to an external url and retrieves the response as text (to avoid browser security issues)."
    },
    "EffyMethod 154": {
        "scope": "javascript",
        "prefix": "Efficy.openUrl2(url, request, requestHeader)",
        "body": "Efficy.openUrl2(${1:url}, ${2:request}, ${3:requestHeader});\n",
        "description": "Sends a request to an external url and retrieves the response as text (to avoid browser security issues).\nCan also return the response code instead of the response text, by adding an additional parameter in the requestHeader: EffHttpStatus:true"
    },
    "EffyMethod 155": {
        "scope": "javascript",
        "prefix": "Efficy.openUrlSecure(url, postedValues, headers, method, clientCertName, basicLogin, basicPassword, timeout, binary)",
        "body": "Efficy.openUrlSecure(${1:url}, ${2:postedValues}, ${3:headers}, ${4:method}, ${5:clientCertName}, ${6:basicLogin}, ${7:basicPassword}, ${8:timeout}, ${9:binary});\n",
        "description": "Sends a request to an external url with optional headers, method, Mutual SSL or Basic HTTP authentication.\n Both authentication methods are mutually exclusive.\nThe method returns an object with properties success, statusCode, body and headers.\n\"success\" is true when the HTTP statusCode is in the 200-2xx range.\nWhen a network level error or a timeout occurs, the statusCode will be set to 999 and the body will contain\nadditional information with a wininet error code (list here)\n"
    },
    "EffyMethod 156": {
        "scope": "javascript",
        "prefix": "Efficy.parentAlias()",
        "body": "undefined;\n",
        "description": "Retrieves the alias of the parent database.Returns an empty string when the current database is not a child."
    },
    "EffyMethod 157": {
        "scope": "javascript",
        "prefix": "Efficy.parentEntityKey(entity, key)",
        "body": "Efficy.parentEntityKey(${1:entity}, ${2:key});\n",
        "description": "Retrieves the parent of the entity identified by key."
    },
    "EffyMethod 158": {
        "scope": "javascript",
        "prefix": "Efficy.parentProductKey(key)",
        "body": "Efficy.parentProductKey(${1:key});\n",
        "description": "Retrieves the parent of the product identified by key."
    },
    "EffyMethod 159": {
        "scope": "javascript",
        "prefix": "Efficy.parentProjectKey(key)",
        "body": "Efficy.parentProjectKey(${1:key});\n",
        "description": "Retrieves the parent of the project identified by key."
    },
    "EffyMethod 160": {
        "scope": "javascript",
        "prefix": "Efficy.pmuActive()",
        "body": "undefined;\n",
        "description": "Tests if Peak Me Up is active for the current user."
    },
    "EffyMethod 161": {
        "scope": "javascript",
        "prefix": "Efficy.pmuAddItem(entity, key, itemTypeId, quantity, comment)",
        "body": "Efficy.pmuAddItem(${1:entity}, ${2:key}, ${3:itemTypeId}, ${4:quantity}, ${5:comment});\n",
        "description": "Creates a Peak Me Up item for the current user on a given entity."
    },
    "EffyMethod 162": {
        "scope": "javascript",
        "prefix": "Efficy.pmuCloseOrphan(entity, key, orphanId, pushDelete, k_User)",
        "body": "Efficy.pmuCloseOrphan(${1:entity}, ${2:key}, ${3:orphanId}, ${4:pushDelete}, ${5:k_User});\n",
        "description": "Removes a Peak Me Up orphan from the table and creates the PMU Item."
    },
    "EffyMethod 163": {
        "scope": "javascript",
        "prefix": "Efficy.pmuDeleteItem(pmuId, pushDelete)",
        "body": "Efficy.pmuDeleteItem(${1:pmuId}, ${2:pushDelete});\n",
        "description": "Since Efficy 11.3 "
    },
    "EffyMethod 164": {
        "scope": "javascript",
        "prefix": "Efficy.pmuDetachItem(k_Item)",
        "body": "Efficy.pmuDetachItem(${1:k_Item});\n",
        "description": "Since Efficy 11.3 "
    },
    "EffyMethod 165": {
        "scope": "javascript",
        "prefix": "Efficy.pmuEntityHasItem(entity, key)",
        "body": "Efficy.pmuEntityHasItem(${1:entity}, ${2:key});\n",
        "description": "Tests if a Peak Me Up item has already been set to an entity instance."
    },
    "EffyMethod 166": {
        "scope": "javascript",
        "prefix": "Efficy.pmuInvolved(entity)",
        "body": "Efficy.pmuInvolved(${1:entity});\n",
        "description": "Tests if there are Peak Me Up ItemTypes linked to the entity."
    },
    "EffyMethod 167": {
        "scope": "javascript",
        "prefix": "Efficy.positionDetail(EditHandle, detail, detailKey, relationId)",
        "body": "Efficy.positionDetail(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId});\n",
        "description": "Positions a detail data set on the record identified by detailKey and optionally relationId.\nReturns false if the specified detail record cannot be found."
    },
    "EffyMethod 168": {
        "scope": "javascript",
        "prefix": "Efficy.postSecurity(EditHandle, securityList)",
        "body": "Efficy.postSecurity(${1:EditHandle}, ${2:securityList});\n",
        "description": "Posts the security defined in the securityList argument or previously defined with Efficy.setSecurityUsers().\nIf the securityList argument is provided, it will overwrite any previous user lists or security values set by Efficy.setSecurityUsers() or Efficy.setUserSecurity()!."
    },
    "EffyMethod 169": {
        "scope": "javascript",
        "prefix": "Efficy.readBoolean(section, parameterName, defaultValue)",
        "body": "Efficy.readBoolean(${1:section}, ${2:parameterName}, ${3:defaultValue});\n",
        "description": "Reads a boolean value from user options."
    },
    "EffyMethod 170": {
        "scope": "javascript",
        "prefix": "Efficy.readInteger(section, parameterName, defaultValue)",
        "body": "Efficy.readInteger(${1:section}, ${2:parameterName}, ${3:defaultValue});\n",
        "description": "Reads an integer value from user options."
    },
    "EffyMethod 171": {
        "scope": "javascript",
        "prefix": "Efficy.readSessionBoolean(section, parameterName, defaultValue)",
        "body": "Efficy.readSessionBoolean(${1:section}, ${2:parameterName}, ${3:defaultValue});\n",
        "description": "Reads a non-persistent boolean value stored into the user session."
    },
    "EffyMethod 172": {
        "scope": "javascript",
        "prefix": "Efficy.readSessionFloat(section, parameterName, defaultValue)",
        "body": "Efficy.readSessionFloat(${1:section}, ${2:parameterName}, ${3:defaultValue});\n",
        "description": "Reads a non-persistent float value stored into the user session."
    },
    "EffyMethod 173": {
        "scope": "javascript",
        "prefix": "Efficy.readSessionInteger(section, parameterName, defaultValue)",
        "body": "Efficy.readSessionInteger(${1:section}, ${2:parameterName}, ${3:defaultValue});\n",
        "description": "Reads a non-persistent integer value stored into the user session."
    },
    "EffyMethod 174": {
        "scope": "javascript",
        "prefix": "Efficy.readSessionString(section, parameterName, defaultValue)",
        "body": "Efficy.readSessionString(${1:section}, ${2:parameterName}, ${3:defaultValue});\n",
        "description": "Reads a non-persistent string value stored into the user session."
    },
    "EffyMethod 175": {
        "scope": "javascript",
        "prefix": "Efficy.readString(section, parameterName, defaultValue)",
        "body": "Efficy.readString(${1:section}, ${2:parameterName}, ${3:defaultValue});\n",
        "description": "Reads a string value from user options."
    },
    "EffyMethod 176": {
        "scope": "javascript",
        "prefix": "Efficy.releaseRecord(EditHandle)",
        "body": "Efficy.releaseRecord(${1:EditHandle});\n",
        "description": "Releases the lock on a record and returns the key of the user that locked the record."
    },
    "EffyMethod 177": {
        "scope": "javascript",
        "prefix": "Efficy.removeRecent(entity, key, itemName, gridName)",
        "body": "Efficy.removeRecent(${1:entity}, ${2:key}, ${3:itemName}, ${4:gridName});\n",
        "description": "Removes the record identified by entity and key from the list of recent items."
    },
    "EffyMethod 178": {
        "scope": "javascript",
        "prefix": "Efficy.removeUsers(EditHandle, users)",
        "body": "Efficy.removeUsers(${1:EditHandle}, ${2:users});\n",
        "description": "Only removes the user if (s)he is linked visibly."
    },
    "EffyMethod 179": {
        "scope": "javascript",
        "prefix": "Efficy.removeUsersVl(EditHandle, users)",
        "body": "Efficy.removeUsersVl(${1:EditHandle}, ${2:users});\n",
        "description": "Deprecated since Efficy 11 Only removes the user if (s)he is linked visibly. (Using TValueList)"
    },
    "EffyMethod 180": {
        "scope": "javascript",
        "prefix": "Efficy.revokeSysTokens(entity, key, version, users)",
        "body": "Efficy.revokeSysTokens(${1:entity}, ${2:key}, ${3:version}, ${4:users});\n",
        "description": "Since Efficy 11.2 Revoke all the sharing tokens for a specified Document or File"
    },
    "EffyMethod 181": {
        "scope": "javascript",
        "prefix": "Efficy.search(contextHandle, searchField, orderByFields, searchValue, ownOnly, contains, openedOnly, category, forceRefresh, getAllRecords, queryViewText)",
        "body": "Efficy.search(${1:contextHandle}, ${2:searchField}, ${3:orderByFields}, ${4:searchValue}, ${5:ownOnly}, ${6:contains}, ${7:openedOnly}, ${8:category}, ${9:forceRefresh}, ${10:getAllRecords}, ${11:queryViewText});\n",
        "description": "Performs a search on the database and returns the data set with search results."
    },
    "EffyMethod 182": {
        "scope": "javascript",
        "prefix": "Efficy.sendExternalMail(sendFrom, sendTo, sendCc, subject, body, entity, idLinked, sendCode)",
        "body": "Efficy.sendExternalMail(${1:sendFrom}, ${2:sendTo}, ${3:sendCc}, ${4:subject}, ${5:body}, ${6:entity}, ${7:idLinked}, ${8:sendCode});\n",
        "description": "Sends an e-mail to external recipients (non-Efficy users)."
    },
    "EffyMethod 183": {
        "scope": "javascript",
        "prefix": "Efficy.sendExternalMail2(sendFrom, sendTo, sendCc, sendBcc, subject, body, entity, idLinked, sendCode)",
        "body": "Efficy.sendExternalMail2(${1:sendFrom}, ${2:sendTo}, ${3:sendCc}, ${4:sendBcc}, ${5:subject}, ${6:body}, ${7:entity}, ${8:idLinked}, ${9:sendCode});\n",
        "description": "Since Efficy 2020 Sends an e-mail to external recipients (non-Efficy users)."
    },
    "EffyMethod 184": {
        "scope": "javascript",
        "prefix": "Efficy.sendMailToUsers(sendTo, sendCc, subject, body, entity, idLinked, sendCode)",
        "body": "Efficy.sendMailToUsers(${1:sendTo}, ${2:sendCc}, ${3:subject}, ${4:body}, ${5:entity}, ${6:idLinked}, ${7:sendCode});\n",
        "description": "Sends an e-mail message to Efficy users."
    },
    "EffyMethod 185": {
        "scope": "javascript",
        "prefix": "Efficy.sendNotification(subject, body, users, customParams, entity, key)",
        "body": "Efficy.sendNotification(${1:subject}, ${2:body}, ${3:users}, ${4:customParams}, ${5:entity}, ${6:key});\n",
        "description": "Adds an information to the notification feed of one or several users. Groups are allowed."
    },
    "EffyMethod 186": {
        "scope": "javascript",
        "prefix": "Efficy.setCategories(EditHandle, selectedCategories)",
        "body": "Efficy.setCategories(${1:EditHandle}, ${2:selectedCategories});\n",
        "description": "Activates some categories."
    },
    "EffyMethod 187": {
        "scope": "javascript",
        "prefix": "Efficy.setChangeLogUserName(logUserName)",
        "body": "Efficy.setChangeLogUserName(${1:logUserName});\n",
        "description": "Since Efficy 11.2 Sets the user name to be used in SYS_CHANGED when creating the record history."
    },
    "EffyMethod 188": {
        "scope": "javascript",
        "prefix": "Efficy.setReference(EditHandle, referenceId)",
        "body": "Efficy.setReference(${1:EditHandle}, ${2:referenceId});\n",
        "description": "Requests that a unique reference number be generated when committing the edit context."
    },
    "EffyMethod 189": {
        "scope": "javascript",
        "prefix": "Efficy.setSecurityUsers(EditHandle, users)",
        "body": "Efficy.setSecurityUsers(${1:EditHandle}, ${2:users});\n",
        "description": "Adds each user of the users array in the record's security. These users have the default security.\nUsers not in the users array are deleted from the record's security.\nCall Efficy.postSecurity() after Efficy.setSecurityUsers() to make the changes effective."
    },
    "EffyMethod 190": {
        "scope": "javascript",
        "prefix": "Efficy.setSysStorageValue(aName, value)",
        "body": "Efficy.setSysStorageValue(${1:aName}, ${2:value});\n",
        "description": "Saves a value to the database table \"SYS_STORAGE\"."
    },
    "EffyMethod 191": {
        "scope": "javascript",
        "prefix": "Efficy.setUsers(EditHandle, users, clearUsers, explodeGroups)",
        "body": "Efficy.setUsers(${1:EditHandle}, ${2:users}, ${3:clearUsers}, ${4:explodeGroups});\n",
        "description": "Sets the user relations."
    },
    "EffyMethod 191+": {
        "scope": "javascript",
        "prefix": "su",
        "body": "Efficy.setUsers(${1:EditHandle}, ${2:users}, ${3:clearUsers}, ${4:explodeGroups});\n",
        "description": "Sets the user relations."
    },
    "EffyMethod 192": {
        "scope": "javascript",
        "prefix": "Efficy.setUserSecurity(EditHandle, userId, securityValue)",
        "body": "Efficy.setUserSecurity(${1:EditHandle}, ${2:userId}, ${3:securityValue});\n",
        "description": "Sets the security for a user or group."
    },
    "EffyMethod 193": {
        "scope": "javascript",
        "prefix": "Efficy.setUsersVl(EditHandle, users, clearUsers, explodeGroups)",
        "body": "Efficy.setUsersVl(${1:EditHandle}, ${2:users}, ${3:clearUsers}, ${4:explodeGroups});\n",
        "description": "Deprecated since Efficy 11 Sets the user relations. (Using TValueList)"
    },
    "EffyMethod 194": {
        "scope": "javascript",
        "prefix": "Efficy.sqlQueryDataset(sql, params, storeId)",
        "body": "Efficy.sqlQueryDataset(${1:sql}, ${2:params}, ${3:storeId});\n",
        "description": "Executes a SQL query and returns the resulting data set."
    },
    "EffyMethod 195": {
        "scope": "javascript",
        "prefix": "Efficy.sqlQueryValue(sql, params, defaultValue)",
        "body": "Efficy.sqlQueryValue(${1:sql}, ${2:params}, ${3:defaultValue});\n",
        "description": "Executes a SQL query and returns the value of the first field of the first record. Used to retrieve a single value from the database."
    },
    "EffyMethod 195+": {
        "scope": "javascript",
        "prefix": "sqv",
        "body": "var $1 = Efficy.sqlQueryValue(${2:sql}, ${3:params}, ${4:defaultValue});\n",
        "description": "Executes a SQL query and returns the value of the first field of the first record. Used to retrieve a single value from the database."
    },
    "EffyMethod 196": {
        "scope": "javascript",
        "prefix": "Efficy.updateCategory(EditHandle, category, fieldNames, fieldValues, ignoreInaccessibleCategory)",
        "body": "Efficy.updateCategory(${1:EditHandle}, ${2:category}, ${3:fieldNames}, ${4:fieldValues}, ${5:ignoreInaccessibleCategory});\n",
        "description": "Updates field values of a category data set in the edit context."
    },
    "EffyMethod 197": {
        "scope": "javascript",
        "prefix": "Efficy.updateCategoryField(EditHandle, category, fieldName, fieldValue, ignoreInaccessibleCategory)",
        "body": "Efficy.updateCategoryField(${1:EditHandle}, ${2:category}, ${3:fieldName}, ${4:fieldValue}, ${5:ignoreInaccessibleCategory});\n",
        "description": "Updates the value of a field of any type in a category data set in the edit context."
    },
    "EffyMethod 197+": {
        "scope": "javascript",
        "prefix": "ufc",
        "body": "Efficy.updateCategoryField(${1:EditHandle}, ${2:category}, ${3:fieldName}, ${4:fieldValue}, ${5:ignoreInaccessibleCategory});\n",
        "description": "Updates the value of a field of any type in a category data set in the edit context."
    },
    "EffyMethod 198": {
        "scope": "javascript",
        "prefix": "Efficy.updateCategoryStringField(EditHandle, category, fieldName, fieldValue, ignoreInaccessibleCategory)",
        "body": "Efficy.updateCategoryStringField(${1:EditHandle}, ${2:category}, ${3:fieldName}, ${4:fieldValue}, ${5:ignoreInaccessibleCategory});\n",
        "description": "Deprecated since Efficy 11 Updates the value of a string field in a category data set in the edit context."
    },
    "EffyMethod 199": {
        "scope": "javascript",
        "prefix": "Efficy.updateDetail(EditHandle, detail, detailKey, relationId, fieldNames, fieldValues)",
        "body": "Efficy.updateDetail(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId}, ${5:fieldNames}, ${6:fieldValues});\n",
        "description": "Updates field values of a detail relation in the edit context.When the detail relation doesn't exist, an exception is thrown.\nIf detailKey is 0, the current detail record is used. (relationId is ignored in this case.)"
    },
    "EffyMethod 200": {
        "scope": "javascript",
        "prefix": "Efficy.updateDetail2(EditHandle, detail, detailKey, fieldNames, fieldValues)",
        "body": "Efficy.updateDetail2(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:fieldNames}, ${5:fieldValues});\n",
        "description": "Updates field values of a detail relation in the edit context.\nIf the detail relation does not exist, an exception is thrown.If detailKey is 0, the current detail record is used."
    },
    "EffyMethod 201": {
        "scope": "javascript",
        "prefix": "Efficy.updateDetailField(EditHandle, detail, detailKey, relationId, fieldName, fieldValue)",
        "body": "Efficy.updateDetailField(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId}, ${5:fieldName}, ${6:fieldValue});\n",
        "description": "Updates the value of a field of any type in the relation in the edit context."
    },
    "EffyMethod 202": {
        "scope": "javascript",
        "prefix": "Efficy.updateDetailStringField(EditHandle, detail, detailKey, relationId, fieldName, fieldValue)",
        "body": "Efficy.updateDetailStringField(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:relationId}, ${5:fieldName}, ${6:fieldValue});\n",
        "description": "Deprecated since Efficy 11 Updates the value of a string field in the relation in the edit context."
    },
    "EffyMethod 203": {
        "scope": "javascript",
        "prefix": "Efficy.updateField(EditHandle, tableViewIndex, fieldName, fieldValue)",
        "body": "Efficy.updateField(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldName}, ${4:fieldValue});\n",
        "description": "Updates the value of a field of any type of a master data set in the edit context."
    },
    "EffyMethod 203+": {
        "scope": "javascript",
        "prefix": "uf",
        "body": "Efficy.updateField(${1:EditHandle}, 0, ${2:fieldName}, ${3:fieldValue});\n",
        "description": "Updates the value of a field of any type of a master data set in the edit context."
    },
    "EffyMethod 204": {
        "scope": "javascript",
        "prefix": "Efficy.updateFields(EditHandle, tableViewIndex, fieldNames, fieldValues)",
        "body": "Efficy.updateFields(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldNames}, ${4:fieldValues});\n",
        "description": "Updates the field values of a master data set in the edit context."
    },
    "EffyMethod 205": {
        "scope": "javascript",
        "prefix": "Efficy.updateFields2(EditHandle, tableViewIndex, fieldNames, fieldValues)",
        "body": "Efficy.updateFields2(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldNames}, ${4:fieldValues});\n",
        "description": "Updates the field values of a master data set in the edit context."
    },
    "EffyMethod 206": {
        "scope": "javascript",
        "prefix": "Efficy.updateFieldsWithoutContext(entity, key, tableViewIndex, fieldNames, fieldValues)",
        "body": "Efficy.updateFieldsWithoutContext(${1:entity}, ${2:key}, ${3:tableViewIndex}, ${4:fieldNames}, ${5:fieldValues});\n",
        "description": "Since Efficy 2020 Updates the field values of a master data set without opening any edit context explicitly. An edit context is opened and the changes are commited internally by the method. Because of this, make sure to make a single call to update all fields of the same entity/key."
    },
    "EffyMethod 207": {
        "scope": "javascript",
        "prefix": "Efficy.updateStringField(EditHandle, tableViewIndex, fieldName, fieldValue)",
        "body": "Efficy.updateStringField(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldName}, ${4:fieldValue});\n",
        "description": "Deprecated since Efficy 11 Updates the value of a string field of a master data set in the edit context."
    },
    "EffyMethod 208": {
        "scope": "javascript",
        "prefix": "Efficy.userList()",
        "body": "undefined;\n",
        "description": "Retrieves the 2-dimensional array of users."
    },
    "EffyMethod 209": {
        "scope": "javascript",
        "prefix": "Efficy.usersInGroup(groupId)",
        "body": "Efficy.usersInGroup(${1:groupId});\n",
        "description": "Retrieves the array of members of group groupId."
    },
    "EffyMethod 210": {
        "scope": "javascript",
        "prefix": "Efficy.writeInteger(section, parameterName, value)",
        "body": "Efficy.writeInteger(${1:section}, ${2:parameterName}, ${3:value});\n",
        "description": "Writes an integer value into user options."
    },
    "EffyMethod 211": {
        "scope": "javascript",
        "prefix": "Efficy.writeSessionBoolean(section, parameterName, value)",
        "body": "Efficy.writeSessionBoolean(${1:section}, ${2:parameterName}, ${3:value});\n",
        "description": "Writes a non-persistent boolean value stored into the user session."
    },
    "EffyMethod 212": {
        "scope": "javascript",
        "prefix": "Efficy.writeSessionFloat(section, parameterName, value)",
        "body": "Efficy.writeSessionFloat(${1:section}, ${2:parameterName}, ${3:value});\n",
        "description": "Writes a non-persistent float value stored into the user session."
    },
    "EffyMethod 213": {
        "scope": "javascript",
        "prefix": "Efficy.writeSessionInteger(section, parameterName, value)",
        "body": "Efficy.writeSessionInteger(${1:section}, ${2:parameterName}, ${3:value});\n",
        "description": "Writes a non-persistent integer value stored into the user session."
    },
    "EffyMethod 214": {
        "scope": "javascript",
        "prefix": "Efficy.writeSessionString(section, parameterName, value)",
        "body": "Efficy.writeSessionString(${1:section}, ${2:parameterName}, ${3:value});\n",
        "description": "Writes a non-persistent string value stored into the user session."
    },
    "EffyMethod 215": {
        "scope": "javascript",
        "prefix": "Efficy.writeString(section, parameterName, value)",
        "body": "Efficy.writeString(${1:section}, ${2:parameterName}, ${3:value});\n",
        "description": "Writes a string value into user options."
    },
    "EffyMethod 216": {
        "scope": "javascript",
        "prefix": "Efficy.zipFiles(EditHandle, fileName, files)",
        "body": "Efficy.zipFiles(${1:EditHandle}, ${2:fileName}, ${3:files});\n",
        "description": "Since Efficy 11.2 Generates a Zip archive from a selected list of documents."
    },
    "EffyMethod 217": {
        "scope": "javascript",
        "prefix": "Request.argument(name)",
        "body": "Request.argument(${1:name});\n",
        "description": "Retrieves an argument of the current HTTP request."
    },
    "EffyMethod 218": {
        "scope": "javascript",
        "prefix": "Request.booleanArgument(name)",
        "body": "Request.booleanArgument(${1:name});\n",
        "description": "Retrieves an argument of the current HTTP request and convert it to a boolean."
    },
    "EffyMethod 219": {
        "scope": "javascript",
        "prefix": "Request.contentField(name)",
        "body": "Request.contentField(${1:name});\n",
        "description": "Since Efficy 11.2 Retrieves a value from the posted fields of the web request."
    },
    "EffyMethod 220": {
        "scope": "javascript",
        "prefix": "Request.dateArgument(name, defaultValue, shortDateFormat)",
        "body": "Request.dateArgument(${1:name}, ${2:defaultValue}, ${3:shortDateFormat});\n",
        "description": "Since Efficy 11.1 Retrieves an argument of the current HTTP request and convert it to a DateTime.\n If the conversion fails, returns the default value."
    },
    "EffyMethod 221": {
        "scope": "javascript",
        "prefix": "Request.evaluateMacro(macroFile, macroName, context, entity, detail, values)",
        "body": "Request.evaluateMacro(${1:macroFile}, ${2:macroName}, ${3:context}, ${4:entity}, ${5:detail}, ${6:values});\n",
        "description": "Since Efficy 11.3 Returns the text content of a macro. The tags contained in the macro text ARE evaluated."
    },
    "EffyMethod 222": {
        "scope": "javascript",
        "prefix": "Request.evaluateText(text, context)",
        "body": "Request.evaluateText(${1:text}, ${2:context});\n",
        "description": "Since Efficy 11.3 Evaluate a piece of text containing function tags."
    },
    "EffyMethod 223": {
        "scope": "javascript",
        "prefix": "Request.floatArgument(name, defaultValue)",
        "body": "Request.floatArgument(${1:name}, ${2:defaultValue});\n",
        "description": "Retrieves an argument of the current HTTP request and convert it to float.\n If the conversion fails, returns the default value."
    },
    "EffyMethod 224": {
        "scope": "javascript",
        "prefix": "Request.getArgumentNames(names)",
        "body": "Request.getArgumentNames(${1:names});\n",
        "description": "Retrieves the names of arguments from the URL."
    },
    "EffyMethod 225": {
        "scope": "javascript",
        "prefix": "Request.getHeader(name)",
        "body": "Request.getHeader(${1:name});\n",
        "description": "Since Efficy 11.2 Returns the value of a header of the HTTP request."
    },
    "EffyMethod 226": {
        "scope": "javascript",
        "prefix": "Request.getMacro(name, entity, detail, values)",
        "body": "Request.getMacro(${1:name}, ${2:entity}, ${3:detail}, ${4:values});\n",
        "description": "Returns the text content of a macro. The tags contained in the macro text are NOT evaluated."
    },
    "EffyMethod 227": {
        "scope": "javascript",
        "prefix": "Request.getSessionParameter(name, defaultValue)",
        "body": "Request.getSessionParameter(${1:name}, ${2:defaultValue});\n",
        "description": "Reads a value from user settings."
    },
    "EffyMethod 228": {
        "scope": "javascript",
        "prefix": "Request.integerArgument(name, defaultValue)",
        "body": "Request.integerArgument(${1:name}, ${2:defaultValue});\n",
        "description": "Retrieves an argument of the current HTTP request and convert it to integer.\n If the conversion fails, returns the default value."
    },
    "EffyMethod 229": {
        "scope": "javascript",
        "prefix": "Request.keepContextAlive(handle)",
        "body": "Request.keepContextAlive(${1:handle});\n",
        "description": "Keeps the context for a next use during 30 seconds."
    },
    "EffyMethod 230": {
        "scope": "javascript",
        "prefix": "Request.loadMacros(names)",
        "body": "Request.loadMacros(${1:names});\n",
        "description": "Since Efficy 11.3 Loads a macro file."
    },
    "EffyMethod 231": {
        "scope": "javascript",
        "prefix": "Request.setSessionParameter(name, value)",
        "body": "Request.setSessionParameter(${1:name}, ${2:value});\n",
        "description": "Writes a value into user settings."
    },
    "EffyMethod 232": {
        "scope": "javascript",
        "prefix": "Request.translate(msg, language)",
        "body": "Request.translate(${1:msg}, ${2:language});\n",
        "description": "Translates a text label in the current language of the user session."
    },
    "EffyMethod 233": {
        "scope": "javascript",
        "prefix": "Request.translateDate(dateString)",
        "body": "Request.translateDate(${1:dateString});\n",
        "description": "Translates a date text in the current language of the user session."
    },
    "EffyMethod 234": {
        "scope": "javascript",
        "prefix": "Request.translateDateWithFormat(value, format)",
        "body": "Request.translateDateWithFormat(${1:value}, ${2:format});\n",
        "description": "Since Efficy 11.3 Translates a date in the current language of the user session, in a requested a datetime format."
    },
    "EffyMethod 235": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.accountHasPrivilege(privilege)",
        "body": "Efficy.accountHasPrivilege(${1:privilege});\n",
        "description": ""
    },
    "EffyMethod 236": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.activateCategory(EditHandle, category)",
        "body": "Efficy.activateCategory(${1:EditHandle}, ${2:category});\n",
        "description": "Activates a category in the edit context. If the user does not have the appropriate rights on the category, an exception is thrown."
    },
    "EffyMethod 237": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.addLink(entity, detail, key, detailKey, ignoreExisting)",
        "body": "Efficy.addLink(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey}, ${5:ignoreExisting});\n",
        "description": "Adds a database relation without using an edit context. Can be used when multiple relations are available."
    },
    "EffyMethod 238": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.addLink2(entity, detail, key, detailKey, ignoreExisting)",
        "body": "Efficy.addLink2(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey}, ${5:ignoreExisting});\n",
        "description": "Adds a database relation without using an edit context."
    },
    "EffyMethod 239": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.addOrModifyFavorite(entity, key, text)",
        "body": "Efficy.addOrModifyFavorite(${1:entity}, ${2:key}, ${3:text});\n",
        "description": "Adds a new favorite or update the text of an existing one."
    },
    "EffyMethod 240": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.autoMergeDuplicate(entity, key1, key2, alwaysKeepFirst)",
        "body": "Efficy.autoMergeDuplicate(${1:entity}, ${2:key1}, ${3:key2}, ${4:alwaysKeepFirst});\n",
        "description": "Merges duplicates automatically."
    },
    "EffyMethod 241": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.clearDetail(EditHandle, detail)",
        "body": "Efficy.clearDetail(${1:EditHandle}, ${2:detail});\n",
        "description": "Clears all relations for the specified detail."
    },
    "EffyMethod 242": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.clearSessionToken()",
        "body": "undefined;\n",
        "description": "Clears the token of the current session."
    },
    "EffyMethod 243": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.closeContext(contextHandle, keepOnServer)",
        "body": "Efficy.closeContext(${1:contextHandle}, ${2:keepOnServer});\n",
        "description": "Closes a context. A context remains memory-resident on the web server until it's closed."
    },
    "EffyMethod 244": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.closingCommit(EditHandle)",
        "body": "Efficy.closingCommit(${1:EditHandle});\n",
        "description": "Since Efficy 11 Commits the changes, releases the record and closes the context."
    },
    "EffyMethod 245": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.commitChanges(EditHandle, refreshAfterCommit)",
        "body": "Efficy.commitChanges(${1:EditHandle}, ${2:refreshAfterCommit});\n",
        "description": "Commits the changes of the edit context to the database."
    },
    "EffyMethod 246": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.connectToExistingEdit(EditHandle)",
        "body": "Efficy.connectToExistingEdit(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 247": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consult(entity, key)",
        "body": "Efficy.consult(${1:entity}, ${2:key});\n",
        "description": "Consults a record in the context handle and returns its main data set."
    },
    "EffyMethod 248": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consult2(entity, key, detail, detailResponseHandle)",
        "body": "Efficy.consult2(${1:entity}, ${2:key}, ${3:detail}, ${4:detailResponseHandle});\n",
        "description": ""
    },
    "EffyMethod 249": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultAgenda(beginDate, endDate, userIDs, activeUser, includeRelations)",
        "body": "Efficy.consultAgenda(${1:beginDate}, ${2:endDate}, ${3:userIDs}, ${4:activeUser}, ${5:includeRelations});\n",
        "description": "Retrieves the agenda (diary) for the specified period and users."
    },
    "EffyMethod 250": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultDataSet(contextHandle)",
        "body": "Efficy.consultDataSet(${1:contextHandle});\n",
        "description": ""
    },
    "EffyMethod 251": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultDetail(contextHandle, detail)",
        "body": "Efficy.consultDetail(${1:contextHandle}, ${2:detail});\n",
        "description": "Retrieves the list of linked detail items in a data set."
    },
    "EffyMethod 252": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultEntityList(entity, userIDs, opened, activeUser)",
        "body": "Efficy.consultEntityList(${1:entity}, ${2:userIDs}, ${3:opened}, ${4:activeUser});\n",
        "description": ""
    },
    "EffyMethod 253": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultFavorites()",
        "body": "undefined;\n",
        "description": "Retrieves the list of favorites."
    },
    "EffyMethod 254": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultMainCompanyEx(contactKey)",
        "body": "Efficy.consultMainCompanyEx(${1:contactKey});\n",
        "description": ""
    },
    "EffyMethod 255": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultManyEx(entity, findFields, orderByFields, findValues)",
        "body": "Efficy.consultManyEx(${1:entity}, ${2:findFields}, ${3:orderByFields}, ${4:findValues});\n",
        "description": ""
    },
    "EffyMethod 256": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultQuery(contextHandle, master, detail, queryParams, forceRefresh, getAllRecords)",
        "body": "Efficy.consultQuery(${1:contextHandle}, ${2:master}, ${3:detail}, ${4:queryParams}, ${5:forceRefresh}, ${6:getAllRecords});\n",
        "description": "Runs a database query and returns the results in a data set."
    },
    "EffyMethod 257": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultRecent()",
        "body": "undefined;\n",
        "description": "Retrieves the recent list."
    },
    "EffyMethod 258": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultRecentEx(entity, extraFields)",
        "body": "Efficy.consultRecentEx(${1:entity}, ${2:extraFields});\n",
        "description": ""
    },
    "EffyMethod 259": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.consultTaskList(date, userIDs, activeUser, showPast, showUpcoming)",
        "body": "Efficy.consultTaskList(${1:date}, ${2:userIDs}, ${3:activeUser}, ${4:showPast}, ${5:showUpcoming});\n",
        "description": "Retrieves the task list for the specified date and users."
    },
    "EffyMethod 260": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.contactIDsFromEMailAddresses(recipients)",
        "body": "Efficy.contactIDsFromEMailAddresses(${1:recipients});\n",
        "description": ""
    },
    "EffyMethod 261": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.convertUserCodesToNames(userCodes)",
        "body": "Efficy.convertUserCodesToNames(${1:userCodes});\n",
        "description": ""
    },
    "EffyMethod 262": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.copyDetails(EditHandle, sourceEntity, key, details, mainRelationOnly, changedDetailsOnly)",
        "body": "Efficy.copyDetails(${1:EditHandle}, ${2:sourceEntity}, ${3:key}, ${4:details}, ${5:mainRelationOnly}, ${6:changedDetailsOnly});\n",
        "description": "Copies data from another open edit context, not necessarily on the same entity."
    },
    "EffyMethod 263": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.copyFromExisting(EditHandle, key, minIndex, maxIndex)",
        "body": "Efficy.copyFromExisting(${1:EditHandle}, ${2:key}, ${3:minIndex}, ${4:maxIndex});\n",
        "description": "Copies data from an existing record in the database. The same entity as the current edit context is assumed.\nThe table views within the index range MinIndex to MaxIndex are copied. By default, all table views are copied.\nTo copy a single detail, obtain the table view index using IndexFromDetail and use this value as MinIndex and MaxIndex."
    },
    "EffyMethod 264": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.createDataSet()",
        "body": "undefined;\n",
        "description": "Creates a DataSet object to be used in future GetObject calls.\nMake sure to destroy the object after usage by calling the Free method, otherwise a memory leak will occur."
    },
    "EffyMethod 265": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.dateToSqlParam(value)",
        "body": "Efficy.dateToSqlParam(${1:value});\n",
        "description": ""
    },
    "EffyMethod 266": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.deactivateCategory(EditHandle, category)",
        "body": "Efficy.deactivateCategory(${1:EditHandle}, ${2:category});\n",
        "description": "Since Efficy 11.2 Deactivates a category in the edit context. If the user does not have the appropriate rights on the category, an exception is thrown."
    },
    "EffyMethod 267": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.deleteDetail(EditHandle, detail, detailKey)",
        "body": "Efficy.deleteDetail(${1:EditHandle}, ${2:detail}, ${3:detailKey});\n",
        "description": "Deletes the detail relation identified by detail, detailKey and optionally relationId (if multiple relations are available)."
    },
    "EffyMethod 268": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.deleteLink(entity, detail, key, detailKey)",
        "body": "Efficy.deleteLink(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey});\n",
        "description": "Removes database relations without using an edit context."
    },
    "EffyMethod 269": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.detailExists(EditHandle, detail)",
        "body": "Efficy.detailExists(${1:EditHandle}, ${2:detail});\n",
        "description": "Tests whether the detail entity is available in the edit context."
    },
    "EffyMethod 270": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.downloadRemoteFile(fileName)",
        "body": "Efficy.downloadRemoteFile(${1:fileName});\n",
        "description": "Since Efficy 11.2 Hidden"
    },
    "EffyMethod 271": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.editSecurityDataSet(EditHandle)",
        "body": "Efficy.editSecurityDataSet(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 272": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.entityFromContext(contextHandle)",
        "body": "Efficy.entityFromContext(${1:contextHandle});\n",
        "description": "Returns the entity used in the context handle."
    },
    "EffyMethod 273": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.entityFromTableId(tableId)",
        "body": "Efficy.entityFromTableId(${1:tableId});\n",
        "description": "Retrieves the entity handle from a table ID."
    },
    "EffyMethod 274": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.eventEditInitialized(EditHandle)",
        "body": "Efficy.eventEditInitialized(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 275": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.executeBatch()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 276": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.executeDatabaseQuery(idQuery, queryParameters, loadBlobs)",
        "body": "Efficy.executeDatabaseQuery(${1:idQuery}, ${2:queryParameters}, ${3:loadBlobs});\n",
        "description": ""
    },
    "EffyMethod 277": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.executeEditedQuery(EditHandle, loadBlobs)",
        "body": "Efficy.executeEditedQuery(${1:EditHandle}, ${2:loadBlobs});\n",
        "description": ""
    },
    "EffyMethod 278": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.executePendingBatch()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 279": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.executeSqlQuery(sql, queryParams, recordCount)",
        "body": "Efficy.executeSqlQuery(${1:sql}, ${2:queryParams}, ${3:recordCount});\n",
        "description": ""
    },
    "EffyMethod 280": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.executeSqlQueryEx(accessCode, sql, queryParams, recordCount)",
        "body": "Efficy.executeSqlQueryEx(${1:accessCode}, ${2:sql}, ${3:queryParams}, ${4:recordCount});\n",
        "description": ""
    },
    "EffyMethod 281": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.flushAndIgnoreErrors()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 282": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getAddinVersion()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 283": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getAttachment(EditHandle, fileId)",
        "body": "Efficy.getAttachment(${1:EditHandle}, ${2:fileId});\n",
        "description": ""
    },
    "EffyMethod 284": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getBinaryData(handle)",
        "body": "Efficy.getBinaryData(${1:handle});\n",
        "description": ""
    },
    "EffyMethod 285": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getBooleanData(handle)",
        "body": "Efficy.getBooleanData(${1:handle});\n",
        "description": ""
    },
    "EffyMethod 286": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getCategories(contextHandle)",
        "body": "Efficy.getCategories(${1:contextHandle});\n",
        "description": "Retrieves activated categories."
    },
    "EffyMethod 287": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getCategoryCollection(entity, detail)",
        "body": "Efficy.getCategoryCollection(${1:entity}, ${2:detail});\n",
        "description": ""
    },
    "EffyMethod 288": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getCategoryDataSet(contextHandle, category)",
        "body": "Efficy.getCategoryDataSet(${1:contextHandle}, ${2:category});\n",
        "description": "Retrieves the data set for category CategoryName. Can be null when the category is not available to the current user.\nCheck data set.IsEmpty to make sure the category is selected for the current record."
    },
    "EffyMethod 289": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getContextParameter(contextHandle, parameter)",
        "body": "Efficy.getContextParameter(${1:contextHandle}, ${2:parameter});\n",
        "description": ""
    },
    "EffyMethod 290": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getData(handle)",
        "body": "Efficy.getData(${1:handle});\n",
        "description": ""
    },
    "EffyMethod 291": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getDataset(handle)",
        "body": "Efficy.getDataset(${1:handle});\n",
        "description": "Since Efficy 11.1 Create and retrieves a DataSet with data from a previously obtained response handle.\nMake sure to destroy the object after usage by calling the Free method, otherwise a memory leak will occur."
    },
    "EffyMethod 292": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getDatasetValue(handle, defaultValue)",
        "body": "Efficy.getDatasetValue(${1:handle}, ${2:defaultValue});\n",
        "description": "Since Efficy 11.1 Retrieve a the value from the first field of the first record of a DataSet with data from a previously obtained response handle."
    },
    "EffyMethod 293": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getDefaultRights(entity)",
        "body": "Efficy.getDefaultRights(${1:entity});\n",
        "description": ""
    },
    "EffyMethod 294": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getDetailDataSet(EditHandle, detail)",
        "body": "Efficy.getDetailDataSet(${1:EditHandle}, ${2:detail});\n",
        "description": "Retrieves a relation data set for the specified detail in the edit context."
    },
    "EffyMethod 295": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getEditKey(EditHandle)",
        "body": "Efficy.getEditKey(${1:EditHandle});\n",
        "description": "Retrieves the main item key of the edit context."
    },
    "EffyMethod 296": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getEntityHandle(entityName)",
        "body": "Efficy.getEntityHandle(${1:entityName});\n",
        "description": "Retrieves the entity handle from its string identifier."
    },
    "EffyMethod 297": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getEntityName(entity)",
        "body": "Efficy.getEntityName(${1:entity});\n",
        "description": "Retrieves the string identifier of an entity from an entity handle."
    },
    "EffyMethod 298": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getEntityTables()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 299": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getFieldMetaData(entity, detail)",
        "body": "Efficy.getFieldMetaData(${1:entity}, ${2:detail});\n",
        "description": ""
    },
    "EffyMethod 300": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getInviteData(EditHandle)",
        "body": "Efficy.getInviteData(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 301": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getLookupData(entity, detail, fieldName)",
        "body": "Efficy.getLookupData(${1:entity}, ${2:detail}, ${3:fieldName});\n",
        "description": ""
    },
    "EffyMethod 302": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getLookupDataFromId(tableId, fieldName)",
        "body": "Efficy.getLookupDataFromId(${1:tableId}, ${2:fieldName});\n",
        "description": ""
    },
    "EffyMethod 303": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getLookupKeyFromValue(tableId, fieldName, value)",
        "body": "Efficy.getLookupKeyFromValue(${1:tableId}, ${2:fieldName}, ${3:value});\n",
        "description": "Returns the look-up key value for a look-up label."
    },
    "EffyMethod 304": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getLookupKeyFromValue2(tableName, fieldName, value, searchInTranslations)",
        "body": "Efficy.getLookupKeyFromValue2(${1:tableName}, ${2:fieldName}, ${3:value}, ${4:searchInTranslations});\n",
        "description": "Since Efficy 11 Retrieves the key in a lookup table from the value of one field."
    },
    "EffyMethod 305": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getLookupList(EditHandle, fieldName)",
        "body": "Efficy.getLookupList(${1:EditHandle}, ${2:fieldName});\n",
        "description": ""
    },
    "EffyMethod 306": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getLookupValueFromKey(tableId, fieldName, key)",
        "body": "Efficy.getLookupValueFromKey(${1:tableId}, ${2:fieldName}, ${3:key});\n",
        "description": "Returns the look-up key text for a look-up key."
    },
    "EffyMethod 307": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getLookupValueFromKey2(tableName, fieldName, key)",
        "body": "Efficy.getLookupValueFromKey2(${1:tableName}, ${2:fieldName}, ${3:key});\n",
        "description": "Retrieves the value in a lookup table from its key. If the main value field is specified then the\n translated value for session language is returned. If empty then the default language (English) is returned."
    },
    "EffyMethod 308": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getMasterDataSet(EditHandle, tableViewIndex)",
        "body": "Efficy.getMasterDataSet(${1:EditHandle}, ${2:tableViewIndex});\n",
        "description": "Retrieves a master data set from the edit context."
    },
    "EffyMethod 309": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getObject(handle, component)",
        "body": "Efficy.getObject(${1:handle}, ${2:component});\n",
        "description": "Retrieve an object from a previously obtained response handle."
    },
    "EffyMethod 310": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getOwner(EditHandle)",
        "body": "Efficy.getOwner(${1:EditHandle});\n",
        "description": "Retrieves the key of the owner of the record."
    },
    "EffyMethod 311": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getQueryDataSet(queryHandle)",
        "body": "Efficy.getQueryDataSet(${1:queryHandle});\n",
        "description": "Retrieves the cached data set from a query handle."
    },
    "EffyMethod 312": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getReferenceList(EditHandle)",
        "body": "Efficy.getReferenceList(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 313": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getReferenceListForEntity(entity)",
        "body": "Efficy.getReferenceListForEntity(${1:entity});\n",
        "description": ""
    },
    "EffyMethod 314": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getRegisteredMails()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 315": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getRelationTableId(idTbl1, idTbl2)",
        "body": "Efficy.getRelationTableId(${1:idTbl1}, ${2:idTbl2});\n",
        "description": ""
    },
    "EffyMethod 316": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getRequiredFields(entity)",
        "body": "Efficy.getRequiredFields(${1:entity});\n",
        "description": ""
    },
    "EffyMethod 317": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getServerFileSize(serverPathWithoutRootDir)",
        "body": "Efficy.getServerFileSize(${1:serverPathWithoutRootDir});\n",
        "description": ""
    },
    "EffyMethod 318": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getSessionToken()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 319": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getSetting(module, aName)",
        "body": "Efficy.getSetting(${1:module}, ${2:aName});\n",
        "description": "Since Efficy 11.2 Retrieves the current value of a given Efficy setting."
    },
    "EffyMethod 320": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getSysStorageValue(aName)",
        "body": "Efficy.getSysStorageValue(${1:aName});\n",
        "description": "Retrieves a value from the database table \"SYS_STORAGE\"."
    },
    "EffyMethod 321": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getTemplateFields()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 322": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getTranslatedTableName(entity)",
        "body": "Efficy.getTranslatedTableName(${1:entity});\n",
        "description": ""
    },
    "EffyMethod 323": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getUserId(userName)",
        "body": "Efficy.getUserId(${1:userName});\n",
        "description": "Retrieves the ID (key) of the user UserCode."
    },
    "EffyMethod 324": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.getUserName(userId)",
        "body": "Efficy.getUserName(${1:userId});\n",
        "description": "Retrieves the full name of the user UserID."
    },
    "EffyMethod 325": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.hasRightOnTable(entity, accesOperation)",
        "body": "Efficy.hasRightOnTable(${1:entity}, ${2:accesOperation});\n",
        "description": "Tests whether the current user has the right to perform a certain operation on an entity."
    },
    "EffyMethod 326": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.impersonateUser(impersonateAccount, forceUserRole)",
        "body": "Efficy.impersonateUser(${1:impersonateAccount}, ${2:forceUserRole});\n",
        "description": "Impersonate a different user, for example this can be useful to import data using a specific owner.\nYou require the \"impersonate\" privilege to execute this instruction."
    },
    "EffyMethod 327": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.initializeSecurityList(EditHandle)",
        "body": "Efficy.initializeSecurityList(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 328": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.insertAttachment(EditHandle, attachedFileType, path)",
        "body": "Efficy.insertAttachment(${1:EditHandle}, ${2:attachedFileType}, ${3:path});\n",
        "description": "Inserts an attached file and returns the key (K_FILE)."
    },
    "EffyMethod 329": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.insertDetail(EditHandle, detail, detailKey, linkMainCompany, retrieveName)",
        "body": "Efficy.insertDetail(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:linkMainCompany}, ${5:retrieveName});\n",
        "description": "Inserts a detail relation in the edit context."
    },
    "EffyMethod 330": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.insertDetail2(EditHandle, detail, detailKey, linkMainCompany)",
        "body": "Efficy.insertDetail2(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:linkMainCompany});\n",
        "description": "Inserts a detail relation in the edit context."
    },
    "EffyMethod 331": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.insertDetailEx(EditHandle, detail, detailKey, k_Relation, linkMainCompany)",
        "body": "Efficy.insertDetailEx(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:k_Relation}, ${5:linkMainCompany});\n",
        "description": ""
    },
    "EffyMethod 332": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.isSessionOpened()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 333": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.keyFieldName(entity)",
        "body": "Efficy.keyFieldName(${1:entity});\n",
        "description": "Retrieves the key field of an entity."
    },
    "EffyMethod 334": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.log(value)",
        "body": "Efficy.log(${1:value});\n",
        "description": "While executing a scheduled script or a data synchronization script, the log function lets you add a string\n in the log file of the Data Sync tool or the Efficy service Task Scheduler."
    },
    "EffyMethod 335": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.logMessage(value)",
        "body": "Efficy.logMessage(${1:value});\n",
        "description": ""
    },
    "EffyMethod 336": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.makeConfidential(EditHandle)",
        "body": "Efficy.makeConfidential(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 337": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.openConsultContext(entity, key)",
        "body": "Efficy.openConsultContext(${1:entity}, ${2:key});\n",
        "description": "Opens a consult context for the Entity.A context remains memory-resident (on the web server) until it is closed.\n To avoid memory consumption, always match an OpenConsultContext with a Efficy.closeContext() call."
    },
    "EffyMethod 338": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.openEditContext(entity, key)",
        "body": "Efficy.openEditContext(${1:entity}, ${2:key});\n",
        "description": "Opens an edit context for the record identified by entity and key.A context remains memory-resident (on the web server)\n until it's destroyed again. Always match an OpenEditContext with a Efficy.closeContext() call to avoid memory consumption."
    },
    "EffyMethod 339": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.openEditContextForced(entity, forceKey)",
        "body": "Efficy.openEditContextForced(${1:entity}, ${2:forceKey});\n",
        "description": ""
    },
    "EffyMethod 340": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.openEditContextRelation(entity, detail, key, detailKey, k_Relation)",
        "body": "Efficy.openEditContextRelation(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey}, ${5:k_Relation});\n",
        "description": "Opens an edit context for a relation. If the relation does not yet exist, it is created."
    },
    "EffyMethod 341": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.openEditContextRelation2(entity, detail, key, detailKey)",
        "body": "Efficy.openEditContextRelation2(${1:entity}, ${2:detail}, ${3:key}, ${4:detailKey});\n",
        "description": "Opens an edit context for a relation. If the relation does not yet exist, it will be created."
    },
    "EffyMethod 342": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.openSearchContext(entity)",
        "body": "Efficy.openSearchContext(${1:entity});\n",
        "description": "Opens a consult (search) context for the entity.A context remains memory-resident (on the web server)\n until it's destroyed again. To avoid memory leaks, always match an OpenSearchContext with a Efficy.closeContext() call."
    },
    "EffyMethod 343": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.openTemporaryContext()",
        "body": "undefined;\n",
        "description": "Opens a temporary context without Entity. Typically used to run a Efficy.consultQuery() request.\nYou don't need to close the temporary context, Efficy handles this automatically."
    },
    "EffyMethod 344": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.planAction(EditHandle)",
        "body": "Efficy.planAction(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 345": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.postSecurity(EditHandle, securityList)",
        "body": "Efficy.postSecurity(${1:EditHandle}, ${2:securityList});\n",
        "description": ""
    },
    "EffyMethod 346": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.prepareExchangeSync(accessCode)",
        "body": "Efficy.prepareExchangeSync(${1:accessCode});\n",
        "description": ""
    },
    "EffyMethod 347": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.readAccountOption(fieldName)",
        "body": "Efficy.readAccountOption(${1:fieldName});\n",
        "description": "Read user options."
    },
    "EffyMethod 348": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.readBoolean(section, ident, defaultValue)",
        "body": "Efficy.readBoolean(${1:section}, ${2:ident}, ${3:defaultValue});\n",
        "description": "Reads a boolean value from user options."
    },
    "EffyMethod 349": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.readDateTime(section, ident, defaultValue)",
        "body": "Efficy.readDateTime(${1:section}, ${2:ident}, ${3:defaultValue});\n",
        "description": "Reads a DateTime value from user options."
    },
    "EffyMethod 350": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.readInteger(section, ident, defaultValue)",
        "body": "Efficy.readInteger(${1:section}, ${2:ident}, ${3:defaultValue});\n",
        "description": "Reads an integer value from user options."
    },
    "EffyMethod 351": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.readQueryDefinitionFromString(EditHandle)",
        "body": "Efficy.readQueryDefinitionFromString(${1:EditHandle});\n",
        "description": ""
    },
    "EffyMethod 352": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.readString(section, ident, defaultValue)",
        "body": "Efficy.readString(${1:section}, ${2:ident}, ${3:defaultValue});\n",
        "description": "Reads a string value from user options."
    },
    "EffyMethod 353": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.refreshAccountData()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 354": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.refreshSessionHandle()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 355": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.registerMailToUpload(eMail, password)",
        "body": "Efficy.registerMailToUpload(${1:eMail}, ${2:password});\n",
        "description": ""
    },
    "EffyMethod 356": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.reloadDbSettings()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 357": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.reloadManualCookies()",
        "body": "undefined;\n",
        "description": "Since Efficy 11.2 "
    },
    "EffyMethod 358": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.retrieveAllSyncRelations(applicId)",
        "body": "Efficy.retrieveAllSyncRelations(${1:applicId});\n",
        "description": ""
    },
    "EffyMethod 359": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.retrieveEntityFields(entity, forStateEditor)",
        "body": "Efficy.retrieveEntityFields(${1:entity}, ${2:forStateEditor});\n",
        "description": ""
    },
    "EffyMethod 360": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.saveParameters()",
        "body": "undefined;\n",
        "description": ""
    },
    "EffyMethod 361": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.search(entity, searchField, value, own, contains, opened)",
        "body": "Efficy.search(${1:entity}, ${2:searchField}, ${3:value}, ${4:own}, ${5:contains}, ${6:opened});\n",
        "description": "Performs a search on the database and returns the data set with search results."
    },
    "EffyMethod 362": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.searchContactsByPhone(phoneNumber)",
        "body": "Efficy.searchContactsByPhone(${1:phoneNumber});\n",
        "description": ""
    },
    "EffyMethod 363": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.searchDataSet(contextHandle, searchMethod, value, own, contains, opened)",
        "body": "Efficy.searchDataSet(${1:contextHandle}, ${2:searchMethod}, ${3:value}, ${4:own}, ${5:contains}, ${6:opened});\n",
        "description": "Performs a search on the database and returns the data set with search results."
    },
    "EffyMethod 364": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.searchDetail(contextHandle, key, detail)",
        "body": "Efficy.searchDetail(${1:contextHandle}, ${2:key}, ${3:detail});\n",
        "description": ""
    },
    "EffyMethod 365": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.searchLdap(host, userName, password, baseName, filter, scope, encrypt)",
        "body": "Efficy.searchLdap(${1:host}, ${2:userName}, ${3:password}, ${4:baseName}, ${5:filter}, ${6:scope}, ${7:encrypt});\n",
        "description": ""
    },
    "EffyMethod 366": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.sendExternalMail(sendFrom, sendTo, sendCc, subject, body, entity, idLinked, sendCode)",
        "body": "Efficy.sendExternalMail(${1:sendFrom}, ${2:sendTo}, ${3:sendCc}, ${4:subject}, ${5:body}, ${6:entity}, ${7:idLinked}, ${8:sendCode});\n",
        "description": "Sends an e-mail to external recipients (non-Efficy users)."
    },
    "EffyMethod 367": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.sendMailToUsers(sendTo, sendCc, subject, body, entity, idLinked, sendCode)",
        "body": "Efficy.sendMailToUsers(${1:sendTo}, ${2:sendCc}, ${3:subject}, ${4:body}, ${5:entity}, ${6:idLinked}, ${7:sendCode});\n",
        "description": "Sends an e-mail message to Efficy users."
    },
    "EffyMethod 368": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.sendNotification(subject, body, users, customParams, entity, key)",
        "body": "Efficy.sendNotification(${1:subject}, ${2:body}, ${3:users}, ${4:customParams}, ${5:entity}, ${6:key});\n",
        "description": "Since Efficy 11 Adds an information to the notification feed of one or several users. Groups are allowed."
    },
    "EffyMethod 369": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setCategories(EditHandle, categoryList)",
        "body": "Efficy.setCategories(${1:EditHandle}, ${2:categoryList});\n",
        "description": "Activates some categories"
    },
    "EffyMethod 370": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setChangeLogUserName(logUserName)",
        "body": "Efficy.setChangeLogUserName(${1:logUserName});\n",
        "description": "Since Efficy 11.2 Sets the user name to be used in SYS_CHANGED when creating the record history."
    },
    "EffyMethod 371": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setOwner(EditHandle, ownerId)",
        "body": "Efficy.setOwner(${1:EditHandle}, ${2:ownerId});\n",
        "description": "Changes the user of an element in a specified context."
    },
    "EffyMethod 372": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setReference(EditHandle, referenceId)",
        "body": "Efficy.setReference(${1:EditHandle}, ${2:referenceId});\n",
        "description": "Requests that a unique reference number be generated when committing the edit context."
    },
    "EffyMethod 373": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setSecurityUsers(EditHandle, users)",
        "body": "Efficy.setSecurityUsers(${1:EditHandle}, ${2:users});\n",
        "description": "Adds each user of the Users array in the record's security. These users have the default security.\nUsers not in the Users array are deleted from the record's security.\nCall postSecurity after Efficy.setSecurityUsers() to make the changes effective."
    },
    "EffyMethod 374": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setSoapLogFileNames(requestFile, responseFile)",
        "body": "Efficy.setSoapLogFileNames(${1:requestFile}, ${2:responseFile});\n",
        "description": "Since Efficy 11.1 "
    },
    "EffyMethod 375": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setUsers(EditHandle, users, clearUsers)",
        "body": "Efficy.setUsers(${1:EditHandle}, ${2:users}, ${3:clearUsers});\n",
        "description": "Sets the user relations."
    },
    "EffyMethod 376": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.setUserSecurity(EditHandle, account, securityValue)",
        "body": "Efficy.setUserSecurity(${1:EditHandle}, ${2:account}, ${3:securityValue});\n",
        "description": "Sets the security for a user or group."
    },
    "EffyMethod 377": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.tableIdFromEntity(entity)",
        "body": "Efficy.tableIdFromEntity(${1:entity});\n",
        "description": "Retrieves a table ID from an entity."
    },
    "EffyMethod 378": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.tableIdFromEntityName(entityName)",
        "body": "Efficy.tableIdFromEntityName(${1:entityName});\n",
        "description": "Retrieves a table ID from an entity string identifier."
    },
    "EffyMethod 379": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.unplanAction(EditHandle)",
        "body": "Efficy.unplanAction(${1:EditHandle});\n",
        "description": "Converts a meeting to a task"
    },
    "EffyMethod 380": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateAttachment(EditHandle, idBlob, attachmentAsString, compress)",
        "body": "Efficy.updateAttachment(${1:EditHandle}, ${2:idBlob}, ${3:attachmentAsString}, ${4:compress});\n",
        "description": "Updates an attached file and returns the key (K_FILE)."
    },
    "EffyMethod 381": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateAttachmentFromFile(EditHandle, idBlob, attachmentPath, compress)",
        "body": "Efficy.updateAttachmentFromFile(${1:EditHandle}, ${2:idBlob}, ${3:attachmentPath}, ${4:compress});\n",
        "description": "Updates an attached file from a file and returns the key (K_FILE)."
    },
    "EffyMethod 382": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateBinaryField(EditHandle, tableViewIndex, fieldName, value)",
        "body": "Efficy.updateBinaryField(${1:EditHandle}, ${2:tableViewIndex}, ${3:fieldName}, ${4:value});\n",
        "description": "Updates the binary field values of a master data set in the edit context."
    },
    "EffyMethod 383": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateCategory(EditHandle, category, fldNames, fldValues)",
        "body": "Efficy.updateCategory(${1:EditHandle}, ${2:category}, ${3:fldNames}, ${4:fldValues});\n",
        "description": "Updates field values of a category data set in the edit context."
    },
    "EffyMethod 384": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateDetail(EditHandle, detail, detailKey, fldNames, fldValues)",
        "body": "Efficy.updateDetail(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:fldNames}, ${5:fldValues});\n",
        "description": "Updates field values of a detail relation in the edit context.\nWhen the detail relation doesn't exist, an exception is thrown.\nIf detailKey is 0, the current detail record is used. (relationId is ignored in this case.)"
    },
    "EffyMethod 385": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateDetail2(EditHandle, detail, detailKey, fldNames, fldValues)",
        "body": "Efficy.updateDetail2(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:fldNames}, ${5:fldValues});\n",
        "description": "Updates field values of a detail relation in the edit context.\nIf the detail relation does not exist, an exception is thrown.\nIf detailKey is 0, the current detail record is used."
    },
    "EffyMethod 386": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateDetailEx(EditHandle, detail, detailKey, k_Relation, fldNames, fldValues)",
        "body": "Efficy.updateDetailEx(${1:EditHandle}, ${2:detail}, ${3:detailKey}, ${4:k_Relation}, ${5:fldNames}, ${6:fldValues});\n",
        "description": "Updates field values of a detail relation in the edit context.\nIf the detail relation does not exist, an exception is thrown.If detailKey is 0, the current detail record is used."
    },
    "EffyMethod 387": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateFields(EditHandle, tableViewIndex, fldNames, fldValues)",
        "body": "Efficy.updateFields(${1:EditHandle}, ${2:tableViewIndex}, ${3:fldNames}, ${4:fldValues});\n",
        "description": "Updates the field values of a master data set in the edit context."
    },
    "EffyMethod 388": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.updateFields2(EditHandle, tableViewIndex, fldNames, fldValues)",
        "body": "Efficy.updateFields2(${1:EditHandle}, ${2:tableViewIndex}, ${3:fldNames}, ${4:fldValues});\n",
        "description": "Updates the field values of a master data set in the edit context."
    },
    "EffyMethod 389": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.usersInGroup(groupId)",
        "body": "Efficy.usersInGroup(${1:groupId});\n",
        "description": "Retrieves the array of members of group GroupID."
    },
    "EffyMethod 390": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.writeAccountOption(fieldName, value)",
        "body": "Efficy.writeAccountOption(${1:fieldName}, ${2:value});\n",
        "description": "Writes user options."
    },
    "EffyMethod 391": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.writeBoolean(section, ident, value)",
        "body": "Efficy.writeBoolean(${1:section}, ${2:ident}, ${3:value});\n",
        "description": "Writes an boolean value into user options."
    },
    "EffyMethod 392": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.writeDateTime(section, ident, value)",
        "body": "Efficy.writeDateTime(${1:section}, ${2:ident}, ${3:value});\n",
        "description": "Writes an DateTime value into user options."
    },
    "EffyMethod 393": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.writeInteger(section, ident, value)",
        "body": "Efficy.writeInteger(${1:section}, ${2:ident}, ${3:value});\n",
        "description": "Writes an integer value into user options."
    },
    "EffyMethod 394": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.writeQueryToString(EditHandle, queryDefinition)",
        "body": "Efficy.writeQueryToString(${1:EditHandle}, ${2:queryDefinition});\n",
        "description": "Since Efficy 11.3 "
    },
    "EffyMethod 395": {
        "scope": "javascript",
        "prefix": "(Remote) Efficy.writeString(section, ident, value)",
        "body": "Efficy.writeString(${1:section}, ${2:ident}, ${3:value});\n",
        "description": "Writes a string value into user options."
    },
    "EffyMethod 396": {
        "scope": "javascript",
        "prefix": "Response.setContent(content)",
        "body": "Response.setContent(${1:content});\n",
        "description": "Since Efficy 11.2 Sets the information sent to the web client in response to an HTTP request.\nOnly available in the context of a /node request."
    },
    "EffyMethod 397": {
        "scope": "javascript",
        "prefix": "Response.setContentEncoding(contentEncoding)",
        "body": "Response.setContentEncoding(${1:contentEncoding});\n",
        "description": "Since Efficy 11.2 Specifies the compression algorithm applied to the Content of the HTTP response.\nOnly available in the context of a /node request."
    },
    "EffyMethod 398": {
        "scope": "javascript",
        "prefix": "Response.setContentLength(contentLength)",
        "body": "Response.setContentLength(${1:contentLength});\n",
        "description": "Since Efficy 11.2 Sets the size of the Content of the HTTP response, in decimal number of octets.\nOnly available in the context of a /node request."
    },
    "EffyMethod 399": {
        "scope": "javascript",
        "prefix": "Response.setContentType(contentType)",
        "body": "Response.setContentType(${1:contentType});\n",
        "description": "Since Efficy 11.2 Sets the media type of the Content of the HTTP response.\nOnly available in the context of a /node request."
    },
    "EffyMethod 400": {
        "scope": "javascript",
        "prefix": "Response.setCookie(values, domain, path, expires, secure)",
        "body": "Response.setCookie(${1:values}, ${2:domain}, ${3:path}, ${4:expires}, ${5:secure});\n",
        "description": "Since Efficy 11.2 Sets a cookie in the HTTP response.\nOnly available in the context of a /node request."
    },
    "EffyMethod 401": {
        "scope": "javascript",
        "prefix": "Response.setHeader(name, value)",
        "body": "Response.setHeader(${1:name}, ${2:value});\n",
        "description": "Since Efficy 11.2 Sets a header item of the HTTP response.\nOnly available in the context of a /node request."
    },
    "EffyMethod 402": {
        "scope": "javascript",
        "prefix": "Response.setRawContent(rawContent)",
        "body": "Response.setRawContent(${1:rawContent});\n",
        "description": "Since Efficy 11.2 Sets the information sent to the web client in response to an HTTP request.\nOnly available in the context of a /node request."
    },
    "EffyMethod 403": {
        "scope": "javascript",
        "prefix": "Response.setStatusCode(statusCode)",
        "body": "Response.setStatusCode(${1:statusCode});\n",
        "description": "Since Efficy 11.2 Sets the status code of the Response.\nOnly available in the context of a /node request."
    },
    "EffyMethod 404": {
        "scope": "javascript",
        "prefix": "TDataSet.append()",
        "body": "undefined;\n",
        "description": "Appends a new record after the last record of the data set."
    },
    "EffyMethod 405": {
        "scope": "javascript",
        "prefix": "TDataSet.delete()",
        "body": "undefined;\n",
        "description": "Deletes the current record."
    },
    "EffyMethod 406": {
        "scope": "javascript",
        "prefix": "TDataSet.edit()",
        "body": "undefined;\n",
        "description": "Puts the data set in the edit mode."
    },
    "EffyMethod 407": {
        "scope": "javascript",
        "prefix": "TDataSet.fieldByName(fieldName)",
        "body": "TDataSet.fieldByName(${1:fieldName});\n",
        "description": "Returns a field whose value can be accessed or modified using the asString, asInteger,\n asFloat or value properties.\nIf the field does not exist, an exception is thrown."
    },
    "EffyMethod 408": {
        "scope": "javascript",
        "prefix": "TDataSet.findField(fieldName)",
        "body": "TDataSet.findField(${1:fieldName});\n",
        "description": "Returns a field whose value can be accessed or modified using the asString, asInteger,\n asFloat or value properties.\nIf the field doesn't exist, the function returns null."
    },
    "EffyMethod 409": {
        "scope": "javascript",
        "prefix": "TDataSet.first()",
        "body": "undefined;\n",
        "description": "Positions the data set on the first record."
    },
    "EffyMethod 410": {
        "scope": "javascript",
        "prefix": "TDataSet.insert()",
        "body": "undefined;\n",
        "description": "Inserts a new record in the data set at the current position."
    },
    "EffyMethod 411": {
        "scope": "javascript",
        "prefix": "TDataSet.isEmpty()",
        "body": "undefined;\n",
        "description": "Tests whether the data set contains any record."
    },
    "EffyMethod 412": {
        "scope": "javascript",
        "prefix": "TDataSet.locate(fields, values, options)",
        "body": "TDataSet.locate(${1:fields}, ${2:values}, ${3:options});\n",
        "description": "Locate a record in the data set. The function returns true if a matching record is found, and will position the data set on the first record that matches the criteria."
    },
    "EffyMethod 413": {
        "scope": "javascript",
        "prefix": "TDataSet.next()",
        "body": "undefined;\n",
        "description": "Positions the data set on the next record."
    },
    "EffyMethod 414": {
        "scope": "javascript",
        "prefix": "TDataSet.post()",
        "body": "undefined;\n",
        "description": "Posts the changes made to the current record in the data set."
    },
    "EffyMethod 415": {
        "scope": "javascript",
        "prefix": "TEnhStringList.add()",
        "body": "undefined;\n",
        "description": "Add a string to the list."
    },
    "EffyMethod 416": {
        "scope": "javascript",
        "prefix": "TEnhStringList.addValue(name, value)",
        "body": "TEnhStringList.addValue(${1:name}, ${2:value});\n",
        "description": "Since Efficy 2020 "
    },
    "EffyMethod 417": {
        "scope": "javascript",
        "prefix": "TEnhStringList.append()",
        "body": "undefined;\n",
        "description": "Add a string to the list, same as add()."
    },
    "EffyMethod 418": {
        "scope": "javascript",
        "prefix": "TEnhStringList.clear()",
        "body": "undefined;\n",
        "description": "Empties the list."
    },
    "EffyMethod 419": {
        "scope": "javascript",
        "prefix": "TEnhStringList.create()",
        "body": "undefined;\n",
        "description": "Creates an instance of TEnhStringList."
    },
    "EffyMethod 420": {
        "scope": "javascript",
        "prefix": "TEnhStringList.delete(index)",
        "body": "TEnhStringList.delete(${1:index});\n",
        "description": "Removes a string from the list."
    },
    "EffyMethod 421": {
        "scope": "javascript",
        "prefix": "TEnhStringList.exchange(index1, index2)",
        "body": "TEnhStringList.exchange(${1:index1}, ${2:index2});\n",
        "description": "Exchanges two strings in the list."
    },
    "EffyMethod 422": {
        "scope": "javascript",
        "prefix": "TEnhStringList.free()",
        "body": "undefined;\n",
        "description": "Frees the instance of TEnhStringList. See create()."
    },
    "EffyMethod 423": {
        "scope": "javascript",
        "prefix": "TEnhStringList.getString(index)",
        "body": "TEnhStringList.getString(${1:index});\n",
        "description": "Retrieves a string for a given index."
    },
    "EffyMethod 424": {
        "scope": "javascript",
        "prefix": "TEnhStringList.getText(separator, removeLastSeparator)",
        "body": "TEnhStringList.getText(${1:separator}, ${2:removeLastSeparator});\n",
        "description": "Retrieve the full text of the list, with strings separated by a separator string."
    },
    "EffyMethod 425": {
        "scope": "javascript",
        "prefix": "TEnhStringList.indexOf(s)",
        "body": "TEnhStringList.indexOf(${1:s});\n",
        "description": "Retrieves the index of the string in the list. Returns -1 if the string was not found."
    },
    "EffyMethod 426": {
        "scope": "javascript",
        "prefix": "TEnhStringList.indexOfName(name)",
        "body": "TEnhStringList.indexOfName(${1:name});\n",
        "description": "Retrieves the index of the name in a list formatted as Name=Value. Returns -1 if the string was not found."
    },
    "EffyMethod 427": {
        "scope": "javascript",
        "prefix": "TEnhStringList.indexOfValue(value)",
        "body": "TEnhStringList.indexOfValue(${1:value});\n",
        "description": "Since Efficy 2020 "
    },
    "EffyMethod 428": {
        "scope": "javascript",
        "prefix": "TEnhStringList.insert(index, s)",
        "body": "TEnhStringList.insert(${1:index}, ${2:s});\n",
        "description": "Inserts a string at a defined index in the list."
    },
    "EffyMethod 429": {
        "scope": "javascript",
        "prefix": "TEnhStringList.loadFromFile(fileName)",
        "body": "TEnhStringList.loadFromFile(${1:fileName});\n",
        "description": "Loads the content of a text file in the list."
    },
    "EffyMethod 430": {
        "scope": "javascript",
        "prefix": "TEnhStringList.remove(s)",
        "body": "TEnhStringList.remove(${1:s});\n",
        "description": "Since Efficy 2020 "
    },
    "EffyMethod 431": {
        "scope": "javascript",
        "prefix": "TEnhStringList.saveToFile(fileName)",
        "body": "TEnhStringList.saveToFile(${1:fileName});\n",
        "description": "Saves the content of the list to a text file."
    },
    "EffyMethod 432": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.detailFromTableId(tableId)",
        "body": "Efficy.entityCatalog.detailFromTableId(${1:tableId});\n",
        "description": "Retrieves the detail entity handle from a relation table ID."
    },
    "EffyMethod 433": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.entityFromTableId(tableId)",
        "body": "Efficy.entityCatalog.entityFromTableId(${1:tableId});\n",
        "description": "Retrieves the entity handle from a table ID."
    },
    "EffyMethod 434": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.entityNameFromTableId(tableId)",
        "body": "Efficy.entityCatalog.entityNameFromTableId(${1:tableId});\n",
        "description": "Retrieves the string identifier of an entity from a table ID."
    },
    "EffyMethod 435": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.getEntityHandle(entityName)",
        "body": "Efficy.entityCatalog.getEntityHandle(${1:entityName});\n",
        "description": "Retrieves the entity handle from its string identifier."
    },
    "EffyMethod 436": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.getEntityLabel(entity)",
        "body": "Efficy.entityCatalog.getEntityLabel(${1:entity});\n",
        "description": "Returns the translated label of an entity from an entity handle."
    },
    "EffyMethod 437": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.getEntityName(entity)",
        "body": "Efficy.entityCatalog.getEntityName(${1:entity});\n",
        "description": "Retrieves the string identifier of an entity from an entity handle."
    },
    "EffyMethod 438": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.getRelationEntityTableName(entity, detail)",
        "body": "Efficy.entityCatalog.getRelationEntityTableName(${1:entity}, ${2:detail});\n",
        "description": "Retrieves a relation table name from entity and detail handles."
    },
    "EffyMethod 439": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.keyFieldName(entity)",
        "body": "Efficy.entityCatalog.keyFieldName(${1:entity});\n",
        "description": "Retrieves the key field of an entity from an entity handle."
    },
    "EffyMethod 440": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.tableIdFromEntity(entity)",
        "body": "Efficy.entityCatalog.tableIdFromEntity(${1:entity});\n",
        "description": "Retrieves a table ID from an entity from an entity handle."
    },
    "EffyMethod 441": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.tableIdFromEntityDetail(entity, detail)",
        "body": "Efficy.entityCatalog.tableIdFromEntityDetail(${1:entity}, ${2:detail});\n",
        "description": "Retrieves a relation table ID from entity and detail handles."
    },
    "EffyMethod 442": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.tableIdFromEntityName(entityName)",
        "body": "Efficy.entityCatalog.tableIdFromEntityName(${1:entityName});\n",
        "description": "Retrieves a table ID from an entity string identifier."
    },
    "EffyMethod 443": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.tableIdFromName(tableName)",
        "body": "Efficy.entityCatalog.tableIdFromName(${1:tableName});\n",
        "description": "Retrieves a table ID from a table name."
    },
    "EffyMethod 444": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog.tableName(entity)",
        "body": "Efficy.entityCatalog.tableName(${1:entity});\n",
        "description": "Retrieves a table name from an entity handle."
    },
    "EffyMethod 445": {
        "scope": "javascript",
        "prefix": "TFormatSettings.create()",
        "body": "undefined;\n",
        "description": "Creates an instance of the record. TFormatSettings is a record, not a class, and therefore does not need to be destroyed/freed explicitly."
    },
    "EffyMethod 446": {
        "scope": "javascript",
        "prefix": "TMagickWand.create()",
        "body": "undefined;\n",
        "description": "Creates an instance of TMagickWand."
    },
    "EffyMethod 447": {
        "scope": "javascript",
        "prefix": "TMagickWand.free()",
        "body": "undefined;\n",
        "description": "Frees the instance of TMagickWand."
    },
    "EffyMethod 448": {
        "scope": "javascript",
        "prefix": "TMagickWand.loadFromFile(fileName)",
        "body": "TMagickWand.loadFromFile(${1:fileName});\n",
        "description": "Loads the file specified in the parameter fileName into the TMagickWand object."
    },
    "EffyMethod 449": {
        "scope": "javascript",
        "prefix": "TMagickWand.resizeImage(columns, rows, filter, blur)",
        "body": "TMagickWand.resizeImage(${1:columns}, ${2:rows}, ${3:filter}, ${4:blur});\n",
        "description": "Resizes the image to the desired Width and Height."
    },
    "EffyMethod 450": {
        "scope": "javascript",
        "prefix": "TMagickWand.sampleImage(columns, rows)",
        "body": "TMagickWand.sampleImage(${1:columns}, ${2:rows});\n",
        "description": "Scales an image to the desired Width and Height with pixel sampling."
    },
    "EffyMethod 451": {
        "scope": "javascript",
        "prefix": "TMagickWand.saveImageToFile(fileName)",
        "body": "TMagickWand.saveImageToFile(${1:fileName});\n",
        "description": "Saves the image in the file specified in the parameter fileName ."
    },
    "EffyMethod 452": {
        "scope": "javascript",
        "prefix": "TMagickWand.saveToFile(fileName, multiImageFile)",
        "body": "TMagickWand.saveToFile(${1:fileName}, ${2:multiImageFile});\n",
        "description": "Saves the image in the file specified in the parameter fileName ."
    },
    "EffyMethod 453": {
        "scope": "javascript",
        "prefix": "TMagickWand.thumbnailImage(columns, rows)",
        "body": "TMagickWand.thumbnailImage(${1:columns}, ${2:rows});\n",
        "description": "Changes the size of an image to the given dimensions and removes any associated profiles.\n The objective is to produce small thumbnail images suited for display on the web."
    },
    "EffyMethod 454": {
        "scope": "javascript",
        "prefix": "TValueList.add(value)",
        "body": "TValueList.add(${1:value});\n",
        "description": "Deprecated since Efficy 11 Adds a value of any type but string in the list. Arrays are not allowed."
    },
    "EffyMethod 455": {
        "scope": "javascript",
        "prefix": "TValueList.addString(value)",
        "body": "TValueList.addString(${1:value});\n",
        "description": "Deprecated since Efficy 11 Adds a string value in the list."
    },
    "EffyMethod 456": {
        "scope": "javascript",
        "prefix": "TValueList.clear()",
        "body": "undefined;\n",
        "description": "Deprecated since Efficy 11 Empties the list."
    },
    "EffyMethod 457": {
        "scope": "javascript",
        "prefix": "TValueList.count()",
        "body": "undefined;\n",
        "description": "Deprecated since Efficy 11 Returns the number of items in the list."
    },
    "EffyMethod 458": {
        "scope": "javascript",
        "prefix": "TValueList.create(aCount)",
        "body": "TValueList.create(${1:aCount});\n",
        "description": "Deprecated since Efficy 11 Creates an instance of the class."
    },
    "EffyMethod 459": {
        "scope": "javascript",
        "prefix": "TValueList.get(index)",
        "body": "TValueList.get(${1:index});\n",
        "description": "Deprecated since Efficy 11 Gets a value of any type but string from the list."
    },
    "EffyMethod 460": {
        "scope": "javascript",
        "prefix": "TValueList.getString(index)",
        "body": "TValueList.getString(${1:index});\n",
        "description": "Deprecated since Efficy 11 Gets a string value from the list."
    },
    "EffyMethod 461": {
        "scope": "javascript",
        "prefix": "computeSoundex(s)",
        "body": "computeSoundex(${1:s});\n",
        "description": "Since Efficy 11.1 Converts a string value to the corresponding Soundex code."
    },
    "EffyMethod 462": {
        "scope": "javascript",
        "prefix": "contextEncode(s, contexts)",
        "body": "contextEncode(${1:s}, ${2:contexts});\n",
        "description": "Since Efficy 11.1 Encodes a string for one or multiple output contexts.\nThis method is identical to the deprecated Efficy.contextEncode() function and available without the Efficy prefix."
    },
    "EffyMethod 463": {
        "scope": "javascript",
        "prefix": "contextEncodeHtml(s)",
        "body": "contextEncodeHtml(${1:s});\n",
        "description": "Since Efficy 11.1 Encodes a string for the HTML output context: raw data that must be rendered as HTML (e.g. WYSIWYG editors, formatted memos).\nThis method is a shortcut to contextEncode(s, 'HTML')."
    },
    "EffyMethod 464": {
        "scope": "javascript",
        "prefix": "contextEncodeJs(s)",
        "body": "contextEncodeJs(${1:s});\n",
        "description": "Since Efficy 11.1 Encodes a string for the JavaScript output context.\nThis method is a shortcut to contextEncode(s, 'JS') and replaces the method EscapeJavascriptText() deprecated in Efficy 11.1."
    },
    "EffyMethod 465": {
        "scope": "javascript",
        "prefix": "contextEncodeText(s)",
        "body": "contextEncodeText(${1:s});\n",
        "description": "Since Efficy 11.1 Encodes a string for the Text output context: text data inside HTML, which must be encoded to avoid rendering HTML elements.\nThis method is a shortcut to contextEncode(s, 'TEXT') and replaces method escapeHTML() deprecated in Efficy 11.1."
    },
    "EffyMethod 466": {
        "scope": "javascript",
        "prefix": "copyFile(existingFileName, newFileName, failIfExists)",
        "body": "copyFile(${1:existingFileName}, ${2:newFileName}, ${3:failIfExists});\n",
        "description": "Since Efficy 11.2 Copies a file in the file system. Returns true if operation is successful."
    },
    "EffyMethod 467": {
        "scope": "javascript",
        "prefix": "currencyString()",
        "body": "undefined;\n",
        "description": "Specifies the currency symbol."
    },
    "EffyMethod 468": {
        "scope": "javascript",
        "prefix": "currentRecordToJson(dataSet, metadata, fields, contexts, datesAsIso8601)",
        "body": "currentRecordToJson(${1:dataSet}, ${2:metadata}, ${3:fields}, ${4:contexts}, ${5:datesAsIso8601});\n",
        "description": "Since Efficy 11.2 Serializes the current record of a data set to JSON string."
    },
    "EffyMethod 469": {
        "scope": "javascript",
        "prefix": "dataSetToJson(dataSet, metadata, fields, contexts, maxRecords, top, datesAsIso8601)",
        "body": "dataSetToJson(${1:dataSet}, ${2:metadata}, ${3:fields}, ${4:contexts}, ${5:maxRecords}, ${6:top}, ${7:datesAsIso8601});\n",
        "description": "Serializes a data set to JSON string."
    },
    "EffyMethod 470": {
        "scope": "javascript",
        "prefix": "dateSeparator()",
        "body": "undefined;\n",
        "description": "Specifies the character used to separate the year, month, and day parts of a date value."
    },
    "EffyMethod 471": {
        "scope": "javascript",
        "prefix": "decimalSeparator()",
        "body": "undefined;\n",
        "description": "Specifies the character used to separate the integer part from the fractional part of a floating-point value."
    },
    "EffyMethod 472": {
        "scope": "javascript",
        "prefix": "decodeMime64Utf8(s)",
        "body": "decodeMime64Utf8(${1:s});\n",
        "description": "Since Efficy 11.2 Decodes a Mime64 (Base64) UTF8 string."
    },
    "EffyMethod 473": {
        "scope": "javascript",
        "prefix": "decryptAes(s, passPhrase, prefix)",
        "body": "decryptAes(${1:s}, ${2:passPhrase}, ${3:prefix});\n",
        "description": "Since Efficy 11.1 Decrypts a data string with the AES (Rijndael) algorithm, using a specified passphrase."
    },
    "EffyMethod 474": {
        "scope": "javascript",
        "prefix": "deleteFile(fileName)",
        "body": "deleteFile(${1:fileName});\n",
        "description": "Since Efficy 11.2 Deletes a file in the file system.  Returns true if operation is successful."
    },
    "EffyMethod 475": {
        "scope": "javascript",
        "prefix": "directoryExists(name)",
        "body": "directoryExists(${1:name});\n",
        "description": "Since Efficy 11.2 Tests whether a directory (folder) exists in the file system."
    },
    "EffyMethod 476": {
        "scope": "javascript",
        "prefix": "encodeMime64Utf8(s)",
        "body": "encodeMime64Utf8(${1:s});\n",
        "description": "Since Efficy 11.2 Encodes a UTF8 string to Mime64 (Base64)."
    },
    "EffyMethod 477": {
        "scope": "javascript",
        "prefix": "encryptAes(s, passPhrase, prefix)",
        "body": "encryptAes(${1:s}, ${2:passPhrase}, ${3:prefix});\n",
        "description": "Since Efficy 11.1 Encrypts a data string with the AES (Rijndael) algorithm, using a specified passphrase."
    },
    "EffyMethod 478": {
        "scope": "javascript",
        "prefix": "escapeHtml(s)",
        "body": "escapeHtml(${1:s});\n",
        "description": "Deprecated, please use contextEncodeText."
    },
    "EffyMethod 479": {
        "scope": "javascript",
        "prefix": "escapeRtf(s)",
        "body": "escapeRtf(${1:s});\n",
        "description": "Escapes text to make it safe to insert into an RTF document. To be used only in a template merge script generating an RTF file."
    },
    "EffyMethod 480": {
        "scope": "javascript",
        "prefix": "escapeXml(s)",
        "body": "escapeXml(${1:s});\n",
        "description": "Escapes text to make it safe to insert into an XML document. To be used only in a template merge script generating a DOCX, XLSX or PPTX file."
    },
    "EffyMethod 481": {
        "scope": "javascript",
        "prefix": "extractHtmlBody(html)",
        "body": "extractHtmlBody(${1:html});\n",
        "description": "Since Efficy 11.2 Returns all the contents of an HTML document contained inside the <body></body> tag."
    },
    "EffyMethod 482": {
        "scope": "javascript",
        "prefix": "extractHtmlText(html, maxLength)",
        "body": "extractHtmlText(${1:html}, ${2:maxLength});\n",
        "description": "Since Efficy 11.2 Returns the text contents of an HTML document (strips all the tags)."
    },
    "EffyMethod 483": {
        "scope": "javascript",
        "prefix": "floatToStr(value)",
        "body": "floatToStr(${1:value});\n",
        "description": "Converts a floating-point value into a string."
    },
    "EffyMethod 484": {
        "scope": "javascript",
        "prefix": "format(format, args)",
        "body": "format(${1:format}, ${2:args});\n",
        "description": "Returns a formatted string assembled from a format string and a series of untyped arguments array."
    },
    "EffyMethod 485": {
        "scope": "javascript",
        "prefix": "format2(format, args, settings)",
        "body": "format2(${1:format}, ${2:args}, ${3:settings});\n",
        "description": "Since Efficy 11.1 Returns a formatted string assembled from a format string and a series of untyped arguments array using a set of custom regional format settings."
    },
    "EffyMethod 486": {
        "scope": "javascript",
        "prefix": "formatFloat(format, value)",
        "body": "formatFloat(${1:format}, ${2:value});\n",
        "description": "Converts a Float into a string according to the given format."
    },
    "EffyMethod 487": {
        "scope": "javascript",
        "prefix": "formatFloat2(format, value, settings)",
        "body": "formatFloat2(${1:format}, ${2:value}, ${3:settings});\n",
        "description": "Since Efficy 11.1 Converts a Float into a string according to the given format using a set of custom regional format settings."
    },
    "EffyMethod 488": {
        "scope": "javascript",
        "prefix": "hashMd5(s)",
        "body": "hashMd5(${1:s});\n",
        "description": "Since Efficy 11.1 Returns the MD5 hash of the specified data string.\nWarning! Provided for legacy purposes only. The MD5 algorithm has been broken and is not safe\n to use for storing passwords or sensitive data. For that purpose, use SHA256."
    },
    "EffyMethod 489": {
        "scope": "javascript",
        "prefix": "hashSha1(s)",
        "body": "hashSha1(${1:s});\n",
        "description": "Since Efficy 11.1 Returns the SHA1 hash of the specified data string.\nWarning ! Provided for legacy purposes only. The SHA1 algorithm has been broken and is not safe\n to use for storing passwords or sensitive data. For that purpose, use SHA256."
    },
    "EffyMethod 490": {
        "scope": "javascript",
        "prefix": "hashSha256(s)",
        "body": "hashSha256(${1:s});\n",
        "description": "Since Efficy 11.1 Returns the SHA256 hash of the specified data string.\nThis algorithm is safe to use for storing passwords or sensitive data."
    },
    "EffyMethod 491": {
        "scope": "javascript",
        "prefix": "intToStr(value)",
        "body": "intToStr(${1:value});\n",
        "description": "Converts an integer into a string."
    },
    "EffyMethod 492": {
        "scope": "javascript",
        "prefix": "lineDiff(newFile, oldFile, diffFile, headerLines)",
        "body": "lineDiff(${1:newFile}, ${2:oldFile}, ${3:diffFile}, ${4:headerLines});\n",
        "description": "Since Efficy 11.2 Writes to DiffFile the lines in NewFile that are not found in OldFile. Returns the number of lines written in DiffFile."
    },
    "EffyMethod 493": {
        "scope": "javascript",
        "prefix": "listFileNames(folder, list)",
        "body": "listFileNames(${1:folder}, ${2:list});\n",
        "description": "Since Efficy 11.2 Lists all the files in a directory (folder) in the file system."
    },
    "EffyMethod 494": {
        "scope": "javascript",
        "prefix": "locateByKey(dataSet, fieldName, key)",
        "body": "locateByKey(${1:dataSet}, ${2:fieldName}, ${3:key});\n",
        "description": "Searches a data set for a single key. Position on the record and returns true if the record was found.\nInternally this uses TDataset.locate()."
    },
    "EffyMethod 495": {
        "scope": "javascript",
        "prefix": "locateByKeys(dataSet, fieldNames, keys)",
        "body": "locateByKeys(${1:dataSet}, ${2:fieldNames}, ${3:keys});\n",
        "description": "Searches a data set for a multiple key. Position on the record and returns true if the record was found.\nInternally this uses TDataset.locate()."
    },
    "EffyMethod 496": {
        "scope": "javascript",
        "prefix": "longDateFormat()",
        "body": "undefined;\n",
        "description": "Specifies the format string used to convert a date value to a user-friendly string, in long format."
    },
    "EffyMethod 497": {
        "scope": "javascript",
        "prefix": "longTimeFormat()",
        "body": "undefined;\n",
        "description": "Specifies the format string used to convert a date value to a user-friendly string, in long format."
    },
    "EffyMethod 498": {
        "scope": "javascript",
        "prefix": "lowerCase(s)",
        "body": "lowerCase(${1:s});\n",
        "description": "Converts a string to lower case."
    },
    "EffyMethod 499": {
        "scope": "javascript",
        "prefix": "removeInvalidFileChars(fileName)",
        "body": "removeInvalidFileChars(${1:fileName});\n",
        "description": "Since Efficy 11.2 Removes invalid file chars of a file name, such as '\\', '/', ':', '*', '?', '\"', '<', '>' and '|'."
    },
    "EffyMethod 500": {
        "scope": "javascript",
        "prefix": "renameFile(oldName, newName)",
        "body": "renameFile(${1:oldName}, ${2:newName});\n",
        "description": "Since Efficy 11.2 Renames a file in the file system. Returns true if operation is successful."
    },
    "EffyMethod 501": {
        "scope": "javascript",
        "prefix": "sameText(s1, s2)",
        "body": "sameText(${1:s1}, ${2:s2});\n",
        "description": "Compares the strings S1 and S2 without case sensitivity and returns true when they are equal."
    },
    "EffyMethod 502": {
        "scope": "javascript",
        "prefix": "shortDateFormat()",
        "body": "undefined;\n",
        "description": "Specifies the short format string used to represent a date value as a string."
    },
    "EffyMethod 503": {
        "scope": "javascript",
        "prefix": "shortTimeFormat()",
        "body": "undefined;\n",
        "description": "Specifies the short format string used to represent a time value as a string."
    },
    "EffyMethod 504": {
        "scope": "javascript",
        "prefix": "smartCompressEx(stream, fileName)",
        "body": "smartCompressEx(${1:stream}, ${2:fileName});\n",
        "description": "Compresses the stream and returns it.\nIf a Filename is specified, SmartCompressEx checks if it is necessary to compress it (depending on the file extension)."
    },
    "EffyMethod 505": {
        "scope": "javascript",
        "prefix": "smartCompressFromFile(fileName)",
        "body": "smartCompressFromFile(${1:fileName});\n",
        "description": "Since Efficy 11.1 Compresses the stream of a file and returns it."
    },
    "EffyMethod 506": {
        "scope": "javascript",
        "prefix": "smartDecompressEx(stream)",
        "body": "smartDecompressEx(${1:stream});\n",
        "description": "Decompresses the stream and returns it."
    },
    "EffyMethod 507": {
        "scope": "javascript",
        "prefix": "smartDecompressToFile(stream, fileName)",
        "body": "smartDecompressToFile(${1:stream}, ${2:fileName});\n",
        "description": "Since Efficy 11.1 Decompresses the stream and saves it in a file."
    },
    "EffyMethod 508": {
        "scope": "javascript",
        "prefix": "standardFloatToStr(value)",
        "body": "standardFloatToStr(${1:value});\n",
        "description": "Since Efficy 11.2 Converts a floating-point value to a string in standard format, using a point as decimal separator."
    },
    "EffyMethod 509": {
        "scope": "javascript",
        "prefix": "standardStrToFloat(value)",
        "body": "standardStrToFloat(${1:value});\n",
        "description": "Since Efficy 11.2 Converts a string in standard format to a floating-point value, using a point as decimal separator."
    },
    "EffyMethod 510": {
        "scope": "javascript",
        "prefix": "strAssemble(s1, s2, separator)",
        "body": "strAssemble(${1:s1}, ${2:s2}, ${3:separator});\n",
        "description": "Concatenates two strings and adds the separator if both strings are not empty."
    },
    "EffyMethod 511": {
        "scope": "javascript",
        "prefix": "strLoadBinaryFile(fileName)",
        "body": "strLoadBinaryFile(${1:fileName});\n",
        "description": "Loads a binary file from the hard disk."
    },
    "EffyMethod 512": {
        "scope": "javascript",
        "prefix": "strLoadTextFile(fileName)",
        "body": "strLoadTextFile(${1:fileName});\n",
        "description": "Loads a text file from the hard disk."
    },
    "EffyMethod 513": {
        "scope": "javascript",
        "prefix": "strSaveBinaryFile(fileName, source, append)",
        "body": "strSaveBinaryFile(${1:fileName}, ${2:source}, ${3:append});\n",
        "description": "Saves a binary file to the hard disk."
    },
    "EffyMethod 514": {
        "scope": "javascript",
        "prefix": "strSaveTextFile(fileName, source, append)",
        "body": "strSaveTextFile(${1:fileName}, ${2:source}, ${3:append});\n",
        "description": "Saves a text file to the hard disk."
    },
    "EffyMethod 515": {
        "scope": "javascript",
        "prefix": "strToBool(s)",
        "body": "strToBool(${1:s});\n",
        "description": "Converts a string into a boolean value."
    },
    "EffyMethod 516": {
        "scope": "javascript",
        "prefix": "strToBoolDef(s, defaultValue)",
        "body": "strToBoolDef(${1:s}, ${2:defaultValue});\n",
        "description": "Tries to convert a string into a boolean value.If the conversion fails, the default value is returned."
    },
    "EffyMethod 517": {
        "scope": "javascript",
        "prefix": "strToFloat(s)",
        "body": "strToFloat(${1:s});\n",
        "description": "Converts a string into a floating-point value."
    },
    "EffyMethod 518": {
        "scope": "javascript",
        "prefix": "strToFloatDef(s, defaultValue)",
        "body": "strToFloatDef(${1:s}, ${2:defaultValue});\n",
        "description": "Tries to convert a string into a floating-point value.If the conversion fails, the default value is returned."
    },
    "EffyMethod 519": {
        "scope": "javascript",
        "prefix": "strToInt(s)",
        "body": "strToInt(${1:s});\n",
        "description": "Converts a string into an integer value."
    },
    "EffyMethod 520": {
        "scope": "javascript",
        "prefix": "strToIntDef(s, defaultValue)",
        "body": "strToIntDef(${1:s}, ${2:defaultValue});\n",
        "description": "Tries to convert a string into an integer value.If the conversion fails, the default value is returned."
    },
    "EffyMethod 521": {
        "scope": "javascript",
        "prefix": "thousandSeparator()",
        "body": "undefined;\n",
        "description": "Specifies the short format string used to represent a time value as a string."
    },
    "EffyMethod 522": {
        "scope": "javascript",
        "prefix": "timeSeparator()",
        "body": "undefined;\n",
        "description": "Specifies the character used to separate the hour, minute, and second parts of a time value."
    },
    "EffyMethod 523": {
        "scope": "javascript",
        "prefix": "trim(s)",
        "body": "trim(${1:s});\n",
        "description": "Trims a string on left and right."
    },
    "EffyMethod 524": {
        "scope": "javascript",
        "prefix": "trimLeft(s)",
        "body": "trimLeft(${1:s});\n",
        "description": "Trims a string on the left."
    },
    "EffyMethod 525": {
        "scope": "javascript",
        "prefix": "trimRight(s)",
        "body": "trimRight(${1:s});\n",
        "description": "Trims a string on the right."
    },
    "EffyMethod 526": {
        "scope": "javascript",
        "prefix": "upperCase(s)",
        "body": "upperCase(${1:s});\n",
        "description": "Converts a string to upper case."
    },
    "EffyMethod 527": {
        "scope": "javascript",
        "prefix": "varArrayElement(v, index1, index2)",
        "body": "varArrayElement(${1:v}, ${2:index1}, ${3:index2});\n",
        "description": "Retrieves an element into a variant array."
    },
    "EffyMethod 528": {
        "scope": "javascript",
        "prefix": "varArrayOf(values)",
        "body": "varArrayOf(${1:values});\n",
        "description": "Constructs a variant array of values."
    },
    "EffyMethod 529": {
        "scope": "javascript",
        "prefix": "varIsArray(a)",
        "body": "varIsArray(${1:a});\n",
        "description": "Tests if a variant contains an array."
    },
    "EffyMethod 530": {
        "scope": "javascript",
        "prefix": "businessDaysBetween(date1, date2)",
        "body": "businessDaysBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the number of week days (Monday to Friday) between two dates."
    },
    "EffyMethod 531": {
        "scope": "javascript",
        "prefix": "convertDateTimeTzFromTo(value, fromTimeZone, toTimeZone)",
        "body": "convertDateTimeTzFromTo(${1:value}, ${2:fromTimeZone}, ${3:toTimeZone});\n",
        "description": "Since Efficy 11.1 Converts the provided DateTime from one to another time zone."
    },
    "EffyMethod 532": {
        "scope": "javascript",
        "prefix": "convertLocalDateTimeToUtc(value)",
        "body": "convertLocalDateTimeToUtc(${1:value});\n",
        "description": "Since Efficy 11.1 Converts the provided DateTime from a local value to Coordinated Universal Time."
    },
    "EffyMethod 533": {
        "scope": "javascript",
        "prefix": "convertUtcToLocalDateTime(value)",
        "body": "convertUtcToLocalDateTime(${1:value});\n",
        "description": "Since Efficy 11.1 Converts the provided DateTime from Coordinated Universal Time to a local value."
    },
    "EffyMethod 534": {
        "scope": "javascript",
        "prefix": "dateTimeInRange(value, startDateTime, endDateTime, inclusive)",
        "body": "dateTimeInRange(${1:value}, ${2:startDateTime}, ${3:endDateTime}, ${4:inclusive});\n",
        "description": "Since Efficy 11.1 Checks if the provided DateTime is in the range between two dates. startDateTime must be before endDateTime."
    },
    "EffyMethod 535": {
        "scope": "javascript",
        "prefix": "dateTimeToIso8601(value, inputIsUtc)",
        "body": "dateTimeToIso8601(${1:value}, ${2:inputIsUtc});\n",
        "description": "Since Efficy 11.2 Converts a specified TDateTime value into an ISO-8601 date-and-time value (ex: 2019-02-23 or 2008-09-15T15:53:00+05:00)\nIf the TDateTime is a date only (time is 00:00:00), the output will be omitting the time portion."
    },
    "EffyMethod 536": {
        "scope": "javascript",
        "prefix": "dateTimeToIso8601Full(value, inputIsUtc)",
        "body": "dateTimeToIso8601Full(${1:value}, ${2:inputIsUtc});\n",
        "description": "Since Efficy 11.2 Converts a specified TDateTime value into an ISO-8601 date-and-time value (ex: 2008-09-15T15:53:00+05:00)\nThe output will always use the full format, even if the TDateTime is a date only (time is 00:00:00)"
    },
    "EffyMethod 537": {
        "scope": "javascript",
        "prefix": "dateTimeToStr(dateTime)",
        "body": "dateTimeToStr(${1:dateTime});\n",
        "description": "Converts a DateTime into a string."
    },
    "EffyMethod 538": {
        "scope": "javascript",
        "prefix": "dateTimeToStr2(dateTime, settings)",
        "body": "dateTimeToStr2(${1:dateTime}, ${2:settings});\n",
        "description": "Since Efficy 11.1 Converts a DateTime into a string using a set of custom regional format settings."
    },
    "EffyMethod 539": {
        "scope": "javascript",
        "prefix": "dateTimeToUnix(value, inputIsUtc)",
        "body": "dateTimeToUnix(${1:value}, ${2:inputIsUtc});\n",
        "description": "Since Efficy 11.1 Converts a specified TDateTime value into a Unix/Linux-style date-and-time value."
    },
    "EffyMethod 540": {
        "scope": "javascript",
        "prefix": "dateToStr(dateTime)",
        "body": "dateToStr(${1:dateTime});\n",
        "description": "Converts the date part of a DateTime into a string."
    },
    "EffyMethod 541": {
        "scope": "javascript",
        "prefix": "dayOfTheMonth(value)",
        "body": "dayOfTheMonth(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the day of the month represented by a TDateTime value.\nThe return value range is 1 to 31."
    },
    "EffyMethod 542": {
        "scope": "javascript",
        "prefix": "dayOfTheWeek(value)",
        "body": "dayOfTheWeek(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the day of the week represented by a TDateTime value in an ISO8601 compliant manner (Monday is the first day of the week).\nThe return value range is 1 (Monday) to 7 (Sunday)."
    },
    "EffyMethod 543": {
        "scope": "javascript",
        "prefix": "daysBetween(date1, date2)",
        "body": "daysBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the number of whole days between two specified TDateTime values."
    },
    "EffyMethod 544": {
        "scope": "javascript",
        "prefix": "daysInMonth(value)",
        "body": "daysInMonth(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the number of days in the month of a specified TDateTime value.\nThe return value range is 1 to 31."
    },
    "EffyMethod 545": {
        "scope": "javascript",
        "prefix": "daysInYear(value)",
        "body": "daysInYear(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the number of days in the year of a specified TDateTime value.\nThe return value range is 365 to 366."
    },
    "EffyMethod 546": {
        "scope": "javascript",
        "prefix": "endOfTheDay(value)",
        "body": "endOfTheDay(${1:value});\n",
        "description": "Since Efficy 11.1 Returns a TDateTime that represents the last millisecond of the day identified by a specified TDateTime (23:59:59.999 the same day)."
    },
    "EffyMethod 547": {
        "scope": "javascript",
        "prefix": "endOfTheMonth(value)",
        "body": "endOfTheMonth(${1:value});\n",
        "description": "Since Efficy 11.1 Returns a TDateTime that represents the last millisecond of the last day of the month identified by a specified TDateTime."
    },
    "EffyMethod 548": {
        "scope": "javascript",
        "prefix": "endOfTheWeek(value)",
        "body": "endOfTheWeek(${1:value});\n",
        "description": "Since Efficy 11.1 Returns a TDateTime that represents the last millisecond of the last day of the week identified by a specified TDateTime in an ISO8601 compliant manner (Monday is the first day of the week)."
    },
    "EffyMethod 549": {
        "scope": "javascript",
        "prefix": "formatDateTime(format, dateTime)",
        "body": "formatDateTime(${1:format}, ${2:dateTime});\n",
        "description": "Converts a DateTime into a string according to the given format."
    },
    "EffyMethod 550": {
        "scope": "javascript",
        "prefix": "formatDateTime2(format, dateTime, settings)",
        "body": "formatDateTime2(${1:format}, ${2:dateTime}, ${3:settings});\n",
        "description": "Since Efficy 11.1 Converts a DateTime into a string according to the given format using a set of custom regional format settings."
    },
    "EffyMethod 551": {
        "scope": "javascript",
        "prefix": "hourOfTheDay(value)",
        "body": "hourOfTheDay(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the hour of the day represented by a TDateTime value.\nThe return value range is 0 to 23."
    },
    "EffyMethod 552": {
        "scope": "javascript",
        "prefix": "hoursBetween(date1, date2)",
        "body": "hoursBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the number of whole hours between two specified TDateTime values. This method only counts entire hours.\nThe return value is always positive."
    },
    "EffyMethod 553": {
        "scope": "javascript",
        "prefix": "incBusinessDay(value, numberOfDays)",
        "body": "incBusinessDay(${1:value}, ${2:numberOfDays});\n",
        "description": "Since Efficy 11.1 Adds a number of days to a specified TDateTime value, skipping Saturdays and Sundays and keeping the time part intact.\nThe return value is always a week day."
    },
    "EffyMethod 554": {
        "scope": "javascript",
        "prefix": "incDay(value, numberOfDays)",
        "body": "incDay(${1:value}, ${2:numberOfDays});\n",
        "description": "Since Efficy 11.1 Returns a date shifted by a specified number of days. The time of day is copied to the result."
    },
    "EffyMethod 555": {
        "scope": "javascript",
        "prefix": "incHour(value, numberOfHours)",
        "body": "incHour(${1:value}, ${2:numberOfHours});\n",
        "description": "Since Efficy 11.1 Returns a DateTime value shifted by a specified number of hours."
    },
    "EffyMethod 556": {
        "scope": "javascript",
        "prefix": "incMilliSecond(value, numberOfMilliSeconds)",
        "body": "incMilliSecond(${1:value}, ${2:numberOfMilliSeconds});\n",
        "description": "Since Efficy 11.1 Returns a DateTime value shifted by a specified number of milliseconds."
    },
    "EffyMethod 557": {
        "scope": "javascript",
        "prefix": "incMinute(value, numberOfMinutes)",
        "body": "incMinute(${1:value}, ${2:numberOfMinutes});\n",
        "description": "Since Efficy 11.1 Returns a DateTime value shifted by a specified number of minutes."
    },
    "EffyMethod 558": {
        "scope": "javascript",
        "prefix": "incMonth(dateTime, numberOfMonths)",
        "body": "incMonth(${1:dateTime}, ${2:numberOfMonths});\n",
        "description": "Since Efficy 11.1 Returns a DateTime value shifted by a specified number of months."
    },
    "EffyMethod 559": {
        "scope": "javascript",
        "prefix": "incSecond(value, numberOfSeconds)",
        "body": "incSecond(${1:value}, ${2:numberOfSeconds});\n",
        "description": "Since Efficy 11.1 Returns a DateTime value shifted by a specified number of seconds."
    },
    "EffyMethod 560": {
        "scope": "javascript",
        "prefix": "incWeek(value, numberOfWeeks)",
        "body": "incWeek(${1:value}, ${2:numberOfWeeks});\n",
        "description": "Since Efficy 11.1 Returns a DateTime value shifted by a specified number of weeks. The time of day is copied to the result."
    },
    "EffyMethod 561": {
        "scope": "javascript",
        "prefix": "incYear(value, numberOfYears)",
        "body": "incYear(${1:value}, ${2:numberOfYears});\n",
        "description": "Since Efficy 11.1 Returns a DateTime value shifted by a specified number of years. The time of day is copied to the result."
    },
    "EffyMethod 562": {
        "scope": "javascript",
        "prefix": "isBusinessDay(value)",
        "body": "isBusinessDay(${1:value});\n",
        "description": "Since Efficy 11.1 Indicates whether the specified DateTime value occurs on a business day (week day).\nReturns false if it occurs on a Saturday or Sundays."
    },
    "EffyMethod 563": {
        "scope": "javascript",
        "prefix": "isEmptyDate(value, checkAll)",
        "body": "isEmptyDate(${1:value}, ${2:checkAll});\n",
        "description": "Since Efficy 11.2 Indicates whether the specified DateTime represents an empty date value (represented by the Delphi zero date 30 December 1899)."
    },
    "EffyMethod 564": {
        "scope": "javascript",
        "prefix": "iso8601ToDateTime(value, returnUtc)",
        "body": "iso8601ToDateTime(${1:value}, ${2:returnUtc});\n",
        "description": "Since Efficy 11.2 Converts an ISO-8601 date-and-time value (ex: 2008-09-15T15:53:00+05:00) to a TDateTime value."
    },
    "EffyMethod 565": {
        "scope": "javascript",
        "prefix": "isSameDay(date1, date2)",
        "body": "isSameDay(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Indicates whether a specified TDateTime value occurs on the same day as a criterion date. The time portions of the two values can differ."
    },
    "EffyMethod 566": {
        "scope": "javascript",
        "prefix": "isToday(value)",
        "body": "isToday(${1:value});\n",
        "description": "Since Efficy 11.1 Indicates whether a specified TDateTime value occurs on the current date."
    },
    "EffyMethod 567": {
        "scope": "javascript",
        "prefix": "isWeekendDay(value)",
        "body": "isWeekendDay(${1:value});\n",
        "description": "Since Efficy 11.1 Indicates whether a specified TDateTime value occurs on a Saturday or Sunday."
    },
    "EffyMethod 568": {
        "scope": "javascript",
        "prefix": "milliSecondsBetween(date1, date2)",
        "body": "milliSecondsBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the number of milliseconds between two specified TDateTime values."
    },
    "EffyMethod 569": {
        "scope": "javascript",
        "prefix": "minuteOfTheHour(value)",
        "body": "minuteOfTheHour(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the number of minutes between a specified TDateTime value and the beginning of the same hour."
    },
    "EffyMethod 570": {
        "scope": "javascript",
        "prefix": "minutesBetween(date1, date2)",
        "body": "minutesBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the number of minutes between two specified TDateTime values."
    },
    "EffyMethod 571": {
        "scope": "javascript",
        "prefix": "monthOfTheYear(value)",
        "body": "monthOfTheYear(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the month of the year represented by a TDateTime value.\nThe return value range is 1 to 12."
    },
    "EffyMethod 572": {
        "scope": "javascript",
        "prefix": "monthsBetween(date1, date2)",
        "body": "monthsBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the approximate number of months between two specified TDateTime values.\nBecause months are not all the same length, the returned value is an approximation based on an assumption of 30.4375 days per month. Fractional months are not counted."
    },
    "EffyMethod 573": {
        "scope": "javascript",
        "prefix": "now()",
        "body": "undefined;\n",
        "description": "Since Efficy 11.1 Returns the current date and time, accurate to the nearest second."
    },
    "EffyMethod 574": {
        "scope": "javascript",
        "prefix": "secondsBetween(date1, date2)",
        "body": "secondsBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the number of seconds between two specified TDateTime values."
    },
    "EffyMethod 575": {
        "scope": "javascript",
        "prefix": "standardDateTimeToStr(value)",
        "body": "standardDateTimeToStr(${1:value});\n",
        "description": "Since Efficy 11.1 Converts a DateTime into a string containing the DateTime in the standard database format \"YYYY/MM/DD hh:nn:ss\"."
    },
    "EffyMethod 576": {
        "scope": "javascript",
        "prefix": "standardStrToDateTime(value)",
        "body": "standardStrToDateTime(${1:value});\n",
        "description": "Since Efficy 11.1 Converts a string containing a DateTime in the standard database format \"YYYY/MM/DD hh:nn:ss\" into a DateTime."
    },
    "EffyMethod 577": {
        "scope": "javascript",
        "prefix": "startOfTheDay(value)",
        "body": "startOfTheDay(${1:value});\n",
        "description": "Since Efficy 11.1 Returns a TDateTime that represents 00:00:00 on the day identified by a specified TDateTime."
    },
    "EffyMethod 578": {
        "scope": "javascript",
        "prefix": "startOfTheMonth(value)",
        "body": "startOfTheMonth(${1:value});\n",
        "description": "Since Efficy 11.1 Returns a TDateTime that represents 00:00:00 on the first day of the month identified by a specified TDateTime."
    },
    "EffyMethod 579": {
        "scope": "javascript",
        "prefix": "startOfTheWeek(value)",
        "body": "startOfTheWeek(${1:value});\n",
        "description": "Since Efficy 11.1 Returns a TDateTime that represents 00:00:00 on the first day of the week identified by a specified TDateTime in an ISO8601 compliant manner (Monday is the first day of the week)."
    },
    "EffyMethod 580": {
        "scope": "javascript",
        "prefix": "strToDateTime(s)",
        "body": "strToDateTime(${1:s});\n",
        "description": "Converts a string into a DateTime."
    },
    "EffyMethod 581": {
        "scope": "javascript",
        "prefix": "strToDateTime2(s, settings)",
        "body": "strToDateTime2(${1:s}, ${2:settings});\n",
        "description": "Since Efficy 11.1 Converts a string into a DateTime using a set of custom regional format settings."
    },
    "EffyMethod 582": {
        "scope": "javascript",
        "prefix": "strToDateTimeDef(s, defaultValue)",
        "body": "strToDateTimeDef(${1:s}, ${2:defaultValue});\n",
        "description": "Tries to convert a string into a DateTime value.If the conversion fails, the default value is returned."
    },
    "EffyMethod 583": {
        "scope": "javascript",
        "prefix": "strToDateTimeDef2(s, defaultValue, settings)",
        "body": "strToDateTimeDef2(${1:s}, ${2:defaultValue}, ${3:settings});\n",
        "description": "Since Efficy 11.1 Tries to convert a string into a DateTime value using a set of custom regional format settings.If the conversion fails, the default value is returned."
    },
    "EffyMethod 584": {
        "scope": "javascript",
        "prefix": "timeToStr(dateTime)",
        "body": "timeToStr(${1:dateTime});\n",
        "description": "Converts the time part of a DateTime into a string."
    },
    "EffyMethod 585": {
        "scope": "javascript",
        "prefix": "toBusinessDay(value)",
        "body": "toBusinessDay(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the specified DateTime value converted to a business day.\nWhen the specified DateTime occurs on a Saturday or Sunday, returns the following Monday. When it occurs on a week day, return the DateTime unchanged."
    },
    "EffyMethod 586": {
        "scope": "javascript",
        "prefix": "today()",
        "body": "undefined;\n",
        "description": "♫ is gonna be the day that they're gonna throw it back to you ♫Since Efficy 11.1 Returns a TDateTime value that represents the current date."
    },
    "EffyMethod 587": {
        "scope": "javascript",
        "prefix": "tomorrow()",
        "body": "undefined;\n",
        "description": "♫ and tonight, we can rock all day, we can roll all night ♫Since Efficy 11.1 Returns a TDateTime value that represents the following day."
    },
    "EffyMethod 588": {
        "scope": "javascript",
        "prefix": "unixToDateTime(value, returnUtc)",
        "body": "unixToDateTime(${1:value}, ${2:returnUtc});\n",
        "description": "Since Efficy 11.1 Converts a Unix/Linux style date-and-time value to a TDateTime value."
    },
    "EffyMethod 589": {
        "scope": "javascript",
        "prefix": "utcNow()",
        "body": "undefined;\n",
        "description": "Since Efficy 11.1 Returns the current date and time in Coordinated Universal Time, accurate to the nearest second."
    },
    "EffyMethod 590": {
        "scope": "javascript",
        "prefix": "weekOfTheYear(value)",
        "body": "weekOfTheYear(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the week of the year represented by a TDateTime value in an ISO8601 compliant manner (Monday is the first day of the week).\nThe return value range is 1 to 53."
    },
    "EffyMethod 591": {
        "scope": "javascript",
        "prefix": "weeksBetween(date1, date2)",
        "body": "weeksBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the number of whole weeks between two specified TDateTime values."
    },
    "EffyMethod 592": {
        "scope": "javascript",
        "prefix": "weeksInYear(value)",
        "body": "weeksInYear(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the number of weeks in the year of a specified TDateTime value in an ISO8601 compliant manner (The first week that has four or more days in the year).\nThe return value range is 52 to 53."
    },
    "EffyMethod 593": {
        "scope": "javascript",
        "prefix": "yearOf(value)",
        "body": "yearOf(${1:value});\n",
        "description": "Since Efficy 11.1 Returns the year of the specified TDateTime value.\nThe return value range is 1 to 9999."
    },
    "EffyMethod 594": {
        "scope": "javascript",
        "prefix": "yearsBetween(date1, date2)",
        "body": "yearsBetween(${1:date1}, ${2:date2});\n",
        "description": "Since Efficy 11.1 Returns the approximate number of years between two specified TDateTime values."
    },
    "EffyMethod 595": {
        "scope": "javascript",
        "prefix": "yesterday()",
        "body": "undefined;\n",
        "description": "♫ All my troubles seemed so far away ♫Since Efficy 11.1 Returns a TDateTime value that represents the preceding day."
    },
    "EffyProperty 0": {
        "scope": "javascript",
        "prefix": "Efficy.disableChangeLog",
        "body": "Efficy.disableChangeLog = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 If true, disables writing the history of changes to the database (SYS_CHANGED table); this can improve performance when needed, e.g. for massive imports"
    },
    "EffyProperty 1": {
        "scope": "javascript",
        "prefix": "Efficy.disableNotifications",
        "body": "Efficy.disableNotifications = ${1:val};\n",
        "description": "If true, no system notifications gets generated by subsequent operations. Use this method with care."
    },
    "EffyProperty 2": {
        "scope": "javascript",
        "prefix": "Efficy.disableSecurity",
        "body": "Efficy.disableSecurity = ${1:val};\n",
        "description": "If true, the rights and securities are no longer checked."
    },
    "EffyProperty 3": {
        "scope": "javascript",
        "prefix": "Efficy.disableWorkflow",
        "body": "Efficy.disableWorkflow = ${1:val};\n",
        "description": "If true, no workflow scripting events get generated by subsequent operations."
    },
    "EffyProperty 4": {
        "scope": "javascript",
        "prefix": "Efficy.entityCatalog",
        "body": "Efficy.entityCatalog = ${1:val};\n",
        "description": "The helper object to retrieve metadata."
    },
    "EffyProperty 5": {
        "scope": "javascript",
        "prefix": "Efficy.ignoreRights",
        "body": "Efficy.ignoreRights = ${1:val};\n",
        "description": "Same as DisableSecurity. (deprecated)"
    },
    "EffyProperty 6": {
        "scope": "javascript",
        "prefix": "Efficy.language",
        "body": "Efficy.language = ${1:val};\n",
        "description": "The selected language."
    },
    "EffyProperty 7": {
        "scope": "javascript",
        "prefix": "Efficy.multiCurrencyMode",
        "body": "Efficy.multiCurrencyMode = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The multi-currency mode of the current database. Can be 0 (multi-currency off), 1 (multi-currency on, variable) or 2 (multi-currency on, fixed)"
    },
    "EffyProperty 8": {
        "scope": "javascript",
        "prefix": "Efficy.processName",
        "body": "Efficy.processName = ${1:val};\n",
        "description": "An identifier of the process running the script."
    },
    "EffyProperty 9": {
        "scope": "javascript",
        "prefix": "Efficy.workingPeriodFrom",
        "body": "Efficy.workingPeriodFrom = ${1:val};\n",
        "description": "The low bound of the range shown in agenda."
    },
    "EffyProperty 10": {
        "scope": "javascript",
        "prefix": "Request.content",
        "body": "Request.content = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The contents of the HTTP request. If the 'Content-Type' header of the Request contains the mention ';charset=utf-8', then content will be treated as UTF8. This property is empty for GET requests and contains the full contents of the payload in POST requests."
    },
    "EffyProperty 11": {
        "scope": "javascript",
        "prefix": "Request.contentLength",
        "body": "Request.contentLength = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The length of the contents of the HTTP request."
    },
    "EffyProperty 12": {
        "scope": "javascript",
        "prefix": "Request.contextHandle",
        "body": "Request.contextHandle = ${1:val};\n",
        "description": "The context handle of the current request."
    },
    "EffyProperty 13": {
        "scope": "javascript",
        "prefix": "Request.cookie",
        "body": "Request.cookie = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The value of the cookie header of the HTTP request."
    },
    "EffyProperty 14": {
        "scope": "javascript",
        "prefix": "Request.customBaseUrl",
        "body": "Request.customBaseUrl = ${1:val};\n",
        "description": "The custom base URL of the current session."
    },
    "EffyProperty 15": {
        "scope": "javascript",
        "prefix": "Request.fileBaseUrl",
        "body": "Request.fileBaseUrl = ${1:val};\n",
        "description": "The file base URL of the current session."
    },
    "EffyProperty 16": {
        "scope": "javascript",
        "prefix": "Request.forceRefresh",
        "body": "Request.forceRefresh = ${1:val};\n",
        "description": "If true, disables the use of cached data for the current request."
    },
    "EffyProperty 17": {
        "scope": "javascript",
        "prefix": "Request.hideMessages",
        "body": "Request.hideMessages = ${1:val};\n",
        "description": "If true, disables pop-up alerts in the response page of the current request."
    },
    "EffyProperty 18": {
        "scope": "javascript",
        "prefix": "Request.host",
        "body": "Request.host = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The value of the Host header of the HTTP request."
    },
    "EffyProperty 19": {
        "scope": "javascript",
        "prefix": "Request.messages",
        "body": "Request.messages = ${1:val};\n",
        "description": "The alerts to be inserted into the page."
    },
    "EffyProperty 20": {
        "scope": "javascript",
        "prefix": "Request.method",
        "body": "Request.method = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The method or verb of the Host header of the HTTP request (GET, POST, ...)"
    },
    "EffyProperty 21": {
        "scope": "javascript",
        "prefix": "Request.pathInfo",
        "body": "Request.pathInfo = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The value of the path information (if any) of the URL specified in the HTTP request. (For example: '/dialog')"
    },
    "EffyProperty 22": {
        "scope": "javascript",
        "prefix": "Request.query",
        "body": "Request.query = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The value of the query information (if any) of the URL specified in the HTTP request. (For example: 'page=test&entity=Comp')"
    },
    "EffyProperty 23": {
        "scope": "javascript",
        "prefix": "Request.rawContent",
        "body": "Request.rawContent = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The raw contents of the HTTP request. This property is empty for GET requests and contains the full contents of the payload in POST requests."
    },
    "EffyProperty 24": {
        "scope": "javascript",
        "prefix": "Request.remoteAddr",
        "body": "Request.remoteAddr = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The remote IP address of the client associated with the HTTP request."
    },
    "EffyProperty 25": {
        "scope": "javascript",
        "prefix": "Request.scriptName",
        "body": "Request.scriptName = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The value of the script name (if any) of the URL specified in the HTTP request. (For example: '/efficy.dll')"
    },
    "EffyProperty 26": {
        "scope": "javascript",
        "prefix": "Request.url",
        "body": "Request.url = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 The full URL of the request (Composed of Protocol, Host, ScriptName, PathInfo and Query components)."
    },
    "EffyProperty 27": {
        "scope": "javascript",
        "prefix": "Request.utf8Content",
        "body": "Request.utf8Content = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 Identical to the 'content' property, except that the content will always be treated as UTF-8, even if the 'Content-Type' header of the Request does not the mention ';charset=utf-8'"
    },
    "EffyProperty 28": {
        "scope": "javascript",
        "prefix": "Efficy.active",
        "body": "Efficy.active = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 29": {
        "scope": "javascript",
        "prefix": "Efficy.browserPath",
        "body": "Efficy.browserPath = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 30": {
        "scope": "javascript",
        "prefix": "Efficy.browserPrefix",
        "body": "Efficy.browserPrefix = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 31": {
        "scope": "javascript",
        "prefix": "Efficy.checkManualCookie",
        "body": "Efficy.checkManualCookie = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2"
    },
    "EffyProperty 32": {
        "scope": "javascript",
        "prefix": "Efficy.clientVersion",
        "body": "Efficy.clientVersioC:WebEfficyToolsednParserEdnParser.jsn = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 33": {
        "scope": "javascript",
        "prefix": "Efficy.compression",
        "body": "Efficy.compression = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 34": {
        "scope": "javascript",
        "prefix": "Efficy.currentDatabaseAlias",
        "body": "Efficy.currentDatabaseAlias = ${1:val};\n",
        "description": "(Remote) The alias (name) of the currently connected database."
    },
    "EffyProperty 35": {
        "scope": "javascript",
        "prefix": "Efficy.currentDatabaseTimeZone",
        "body": "Efficy.currentDatabaseTimeZone = ${1:val};\n",
        "description": "(Remote) The current database time zone."
    },
    "EffyProperty 36": {
        "scope": "javascript",
        "prefix": "Efficy.currentLicenseName",
        "body": "Efficy.currentLicenseName = ${1:val};\n",
        "description": "(Remote) The current license name."
    },
    "EffyProperty 37": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserCode",
        "body": "Efficy.currentUserCode = ${1:val};\n",
        "description": "(Remote) The current user code."
    },
    "EffyProperty 38": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserContactId",
        "body": "Efficy.currentUserContactId = ${1:val};\n",
        "description": "(Remote) The contact ID of the current user."
    },
    "EffyProperty 39": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserEmail",
        "body": "Efficy.currentUserEmail = ${1:val};\n",
        "description": "(Remote) The current user e-mail."
    },
    "EffyProperty 40": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserFullName",
        "body": "Efficy.currentUserFullName = ${1:val};\n",
        "description": "(Remote) The current user full name."
    },
    "EffyProperty 41": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserGroups",
        "body": "Efficy.currentUserGroups = ${1:val};\n",
        "description": "(Remote) The array of groups to which the current user belongs."
    },
    "EffyProperty 42": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserId",
        "body": "Efficy.currentUserId = ${1:val};\n",
        "description": "(Remote) The current user ID."
    },
    "EffyProperty 42": {
        "scope": "javascript",
        "prefix": "cu",
        "body": "Efficy.currentUserId",
        "description": "(Remote) The current user ID."
    },
    "EffyProperty 43": {
        "scope": "javascript",
        "prefix": "Efficy.currentUserTimeZone",
        "body": "Efficy.currentUserTimeZone = ${1:val};\n",
        "description": "(Remote) The current user time zone."
    },
    "EffyProperty 44": {
        "scope": "javascript",
        "prefix": "Efficy.customBase",
        "body": "Efficy.customBase = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.1"
    },
    "EffyProperty 45": {
        "scope": "javascript",
        "prefix": "Efficy.dealerBase",
        "body": "Efficy.dealerBase = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.1"
    },
    "EffyProperty 46": {
        "scope": "javascript",
        "prefix": "Efficy.disableChangeLog",
        "body": "Efficy.disableChangeLog = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2 If true, disables writing the history of changes to the database (SYS_CHANGED table); this can improve performance when needed, e.g. for massive imports"
    },
    "EffyProperty 47": {
        "scope": "javascript",
        "prefix": "Efficy.disableNotifications",
        "body": "Efficy.disableNotifications = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2 If true, no system notifications gets generated by subsequent operations. Use this method with care."
    },
    "EffyProperty 48": {
        "scope": "javascript",
        "prefix": "Efficy.disableWorkflow",
        "body": "Efficy.disableWorkflow = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2 If true, no workflow scripting events get generated by subsequent operations."
    },
    "EffyProperty 49": {
        "scope": "javascript",
        "prefix": "Efficy.fileBase",
        "body": "Efficy.fileBase = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.1"
    },
    "EffyProperty 50": {
        "scope": "javascript",
        "prefix": "Efficy.ignoreMessages",
        "body": "Efficy.ignoreMessages = ${1:val};\n",
        "description": "(Remote) "
    },
    "EffyProperty 51": {
        "scope": "javascript",
        "prefix": "Efficy.keepLocalSettings",
        "body": "Efficy.keepLocalSettings = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2 Identical to the 'content' property, except that the content will always be treated as UTF-8, even if the 'Content-Type' header of the Request does not the mention ';charset=utf-8'"
    },
    "EffyProperty 52": {
        "scope": "javascript",
        "prefix": "Efficy.language",
        "body": "Efficy.language = ${1:val};\n",
        "description": "(Remote) The selected language."
    },
    "EffyProperty 53": {
        "scope": "javascript",
        "prefix": "Efficy.manualCookies",
        "body": "Efficy.manualCookies = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2"
    },
    "EffyProperty 54": {
        "scope": "javascript",
        "prefix": "Efficy.requestLogFileName",
        "body": "Efficy.requestLogFileName = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 55": {
        "scope": "javascript",
        "prefix": "Efficy.responseLogFileName",
        "body": "Efficy.responseLogFileName = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 56": {
        "scope": "javascript",
        "prefix": "Efficy.serverVersion",
        "body": "Efficy.serverVersion = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 57": {
        "scope": "javascript",
        "prefix": "Efficy.sessionHandle",
        "body": "Efficy.sessionHandle = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 58": {
        "scope": "javascript",
        "prefix": "Efficy.sessionToken",
        "body": "Efficy.sessionToken = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 59": {
        "scope": "javascript",
        "prefix": "Efficy.soapLogEnabled",
        "body": "Efficy.soapLogEnabled = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2"
    },
    "EffyProperty 60": {
        "scope": "javascript",
        "prefix": "Efficy.soapLogFolder",
        "body": "Efficy.soapLogFolder = ${1:val};\n",
        "description": "(Remote) Introduced in Efficy 11.2"
    },
    "EffyProperty 61": {
        "scope": "javascript",
        "prefix": "Efficy.userList",
        "body": "Efficy.userList = ${1:val};\n",
        "description": "(Remote) The array of users."
    },
    "EffyProperty 62": {
        "scope": "javascript",
        "prefix": "Efficy.webServerUrl",
        "body": "Efficy.webServerUrl = ${1:val};\n",
        "description": "(Remote)"
    },
    "EffyProperty 63": {
        "scope": "javascript",
        "prefix": "TEnhStringList.Create()",
        "body": "TEnhStringList.Create();\n",
        "description": ""
    },
    "EffyProperty 64": {
        "scope": "javascript",
        "prefix": "TEnhStringList.allowEmptyValues",
        "body": "TEnhStringList.allowEmptyValues = ${1:val};\n",
        "description": "Introduced in Efficy 11.2 If true, allows names with empty values to exist in the list. By default names with empty values are removed from the list."
    },
    "EffyProperty 65": {
        "scope": "javascript",
        "prefix": "TEnhStringList.commaText",
        "body": "TEnhStringList.commaText = ${1:val};\n",
        "description": "The full content of the list with individual strings separated by a comma."
    },
    "EffyProperty 66": {
        "scope": "javascript",
        "prefix": "TEnhStringList.count",
        "body": "TEnhStringList.count = ${1:val};\n",
        "description": "The count of elements into the list."
    },
    "EffyProperty 67": {
        "scope": "javascript",
        "prefix": "TEnhStringList.names(integer)",
        "body": "TEnhStringList.names(integer) = ${1:val};\n",
        "description": "A name when the format Name=Value is used."
    },
    "EffyProperty 68": {
        "scope": "javascript",
        "prefix": "TEnhStringList.sorted",
        "body": "TEnhStringList.sorted = ${1:val};\n",
        "description": "If true, the list is automatically sorted."
    },
    "EffyProperty 69": {
        "scope": "javascript",
        "prefix": "TEnhStringList.strings(Integer)",
        "body": "TEnhStringList.strings(Integer) = ${1:val};\n",
        "description": "An element of the list."
    },
    "EffyProperty 70": {
        "scope": "javascript",
        "prefix": "TEnhStringList.text",
        "body": "TEnhStringList.text = ${1:val};\n",
        "description": "The full content of the list."
    },
    "EffyProperty 71": {
        "scope": "javascript",
        "prefix": "TEnhStringList.values(string)",
        "body": "TEnhStringList.values(string) = ${1:val};\n",
        "description": "The value associated to a name."
    },
    "EffyProperty 72": {
        "scope": "javascript",
        "prefix": "TEnhStringList.valuesFromIndex(integer)",
        "body": "TEnhStringList.valuesFromIndex(integer) = ${1:val};\n",
        "description": "A value by index."
    },
    "EffyProperty 73": {
        "scope": "javascript",
        "prefix": "TFormatSettings.Create()",
        "body": "TFormatSettings.Create();;\n",
        "description": ""
    },
    "EffyProperty 74": {
        "scope": "javascript",
        "prefix": "TFormatSettings.currencyDecimals",
        "body": "TFormatSettings.currencyDecimals = ${1:val};\n",
        "description": "The maximum number of digits, after decimal point, for a currency value."
    },
    "EffyProperty 75": {
        "scope": "javascript",
        "prefix": "TFormatSettings.currencyString",
        "body": "TFormatSettings.currencyString = ${1:val};\n",
        "description": "The local currency symbol."
    },
    "EffyProperty 76": {
        "scope": "javascript",
        "prefix": "TFormatSettings.dateSeparator",
        "body": "TFormatSettings.dateSeparator = ${1:val};\n",
        "description": "The character used as date separator."
    },
    "EffyProperty 77": {
        "scope": "javascript",
        "prefix": "TFormatSettings.decimalSeparator",
        "body": "TFormatSettings.decimalSeparator = ${1:val};\n",
        "description": "The character used to separate the integer part from the fractional part of a number."
    },
    "EffyProperty 78": {
        "scope": "javascript",
        "prefix": "TFormatSettings.listSeparator",
        "body": "TFormatSettings.listSeparator = ${1:val};\n",
        "description": "The character used to separate items in a list."
    },
    "EffyProperty 79": {
        "scope": "javascript",
        "prefix": "TFormatSettings.longDateFormat",
        "body": "TFormatSettings.longDateFormat = ${1:val};\n",
        "description": "The long format string used to represent a date value as a string."
    },
    "EffyProperty 80": {
        "scope": "javascript",
        "prefix": "TFormatSettings.longTimeFormat",
        "body": "TFormatSettings.longTimeFormat = ${1:val};\n",
        "description": "The long format string used to represent a time value as a string."
    },
    "EffyProperty 81": {
        "scope": "javascript",
        "prefix": "TFormatSettings.longTimeFormat",
        "body": "TFormatSettings.longTimeFormat = ${1:val};\n",
        "description": "The short format string used to represent a date value as a string."
    },
    "EffyProperty 82": {
        "scope": "javascript",
        "prefix": "TFormatSettings.shortTimeFormat",
        "body": "TFormatSettings.shortTimeFormat = ${1:val};\n",
        "description": "The short format string used to represent a time value as a string."
    },
    "EffyProperty 83": {
        "scope": "javascript",
        "prefix": "TFormatSettings.thousandSeparator",
        "body": "TFormatSettings.thousandSeparator = ${1:val};\n",
        "description": "The character used to separate thousands in numbers with more than three digits to the left of the decimal separator."
    },
    "EffyProperty 84": {
        "scope": "javascript",
        "prefix": "TFormatSettings.timeAmString",
        "body": "TFormatSettings.timeAmString = ${1:val};\n",
        "description": "The suffix string used for time values in the first 12 hours of the day."
    },
    "EffyProperty 85": {
        "scope": "javascript",
        "prefix": "TFormatSettings.timePmString",
        "body": "TFormatSettings.timePmString = ${1:val};\n",
        "description": "The suffix string used for time values in the last 12 hours of the day."
    },
    "EffyProperty 86": {
        "scope": "javascript",
        "prefix": "TFormatSettings.timeSeparator",
        "body": "TFormatSettings.timeSeparator = ${1:val};\n",
        "description": "The character used to separate the hour, minute, and second parts of a time value."
    },
    "EffyProperty 87": {
        "scope": "javascript",
        "prefix": "TMagickWand.Create()",
        "body": "TMagickWand.Create();\n",
        "description": ""
    },
    "EffyProperty 88": {
        "scope": "javascript",
        "prefix": "TMagickWand.imageHeight",
        "body": "TMagickWand.imageHeight = ${1:val};\n",
        "description": "The height of the image."
    },
    "EffyProperty 89": {
        "scope": "javascript",
        "prefix": "TMagickWand.imageWidth",
        "body": "TMagickWand.imageWidth = ${1:val};\n",
        "description": "The width of the image."
    },
    "Additionnal javascript 01": {
        "scope": "javascript",
        "prefix": "clg",
        "body": "console.log('${1:val}');\n",
        "description": ""
    },
    "Additionnal javascript 02": {
        "scope": "javascript",
        "prefix": "tf",
        "body": "try {\n\t${1}\n}\nfinally{\n\tEfficy.closeContext(contextHandle)\n}",
        "description": ""
    },
    "Additionnal javascript 03": {
        "scope": "javascript",
        "prefix": "tc",
        "body": "try {\n\t${1}\n} catch(e) {\n\tthrow new Error(e.message)\n}\n",
        "description": ""
    },
    "Additionnal javascript 04": {
        "scope": "javascript",
        "prefix": "tcf",
        "body": "try {\n\t${1}\n} catch(e) {\n\tthrow new Error(e.message)\n} finally{\n\tEfficy.closeContext(contextHandle)\n}\n",
        "description": ""
    },
    "Additionnal javascript 05": {
        "scope": "javascript",
        "prefix": "db",
        "body": "debugger;",
        "description": ""
    },
    "Additionnal javascript 06": {
        "scope": "javascript",
        "prefix": "ntEntity",
        "body": "ntUser = 1; // users\nntFile = 2; // files (document attachments)\nntDupl = 4; // duplicates\nntFavo = 6; // favorites\nntComp = 10; // companies\nntCont = 11; // contacts\nntProj = 20; // projects\nntPubl = 21; // campaigns (publications)\nntOppo = 22; // sales opportunities\nntCase = 23; // incidents (cases)\nntProf = 24; // profiles\nntDocu = 31; // documents\nntProd = 30; // products\nntActi = 32; // tasks (=unplanned actions)\nntMail = 33; // e-mails\nntTime = 34; // timesheet\nntAppo = 35; // appointments (=planned actions)\nntQuer = 40; // queries\nntRepo = 41; // reports\nntTmpl = 42; // document templates;\n",
        "description": ""
    },
    "Additionnal javascript 07": {
        "scope": "javascript",
        "prefix": ".FieldByName('${1}')",
        "body": ".FieldByName('${1}').AsString",
        "description": ""
    },
    "Additionnal javascript 07+": {
        "scope": "javascript",
        "prefix": ".fbn",
        "body": ".FieldByName('${1}').AsString",
        "description": ""
    },
    "Additionnal javascript 07++": {
        "scope": "javascript",
        "prefix": "tne",
        "body": "throw new Error('${1}');",
        "description": ""
    },
    "Additionnal javascript 08": {
        "scope": "javascript",
        "prefix": "AfterLogon()",
        "body": "function AfterLogon() {\n}",
        "description": ""
    },
    "Additionnal javascript 08+": {
        "scope": "javascript",
        "prefix": "BeforeLogoff()",
        "body": "function BeforeLogoff() {\n}",
        "description": ""
    },
    "Additionnal javascript 09": {
        "scope": "javascript",
        "prefix": "EditInitializedXXXX",
        "body": "function EditInitialized${1:XXXX}(${1:XXXX}Ctx, inserted) {\n${2}\n}",
        "description": ""
    },
    "Additionnal javascript 10": {
        "scope": "javascript",
        "prefix": "OnInsertDetailXXXX",
        "body": "function OnInsertDetail${1:XXXX}${2:yyyy}(${1:XXXX}${2:yyyy}Ctx, ${2:yyyy}, ${2:yyyy}Key) {\n${3}\n}",
        "description": ""
    },
    "Additionnal javascript 10+": {
        "scope": "javascript",
        "prefix": "OnInsertDetailXXXX",
        "body": "function OnDeleteDetail${1:XXXX}${2:yyyy}(${1:XXXX}${2:yyyy}Ctx, ${2:yyyy}, ${2:yyyy}Key) {\n${3}\n}",
        "description": ""
    },
    "Additionnal javascript 11": {
        "scope": "javascript",
        "prefix": "BeforeCommitXXXX",
        "body": "function BeforeCommit${1:XXXX}(${1:XXXX}Ctx, inserted) {\n${2}\n}",
        "description": ""
    },
    "Additionnal javascript 12": {
        "scope": "javascript",
        "prefix": "AfterCommitXXXX",
        "body": "function AfterCommit${1:XXXX}(${1:XXXX}Ctx, inserted) {\n${2}\n}",
        "description": ""
    },
    "Additionnal javascript 13": {
        "scope": "javascript",
        "prefix": "OnBeforeAddLinkXXXXyyyy",
        "body": "function OnBeforeAddLink${1:XXXX}${2:yyyy}(${1:XXXX}Key, ${2:yyyy}Key) {\n${3}\n}",
        "description": ""
    },
    "Additionnal javascript 14": {
        "scope": "javascript",
        "prefix": "OnAddLinkXXXXyyyy",
        "body": "function OnAddLink${1:XXXX}${2:yyyy}(${1:XXXX}Key, ${2:yyyy}Key) {\n${3}\n}",
        "description": ""
    },
    "Additionnal javascript 15": {
        "scope": "javascript",
        "prefix": "OnBeforeDeleteXXXXyyyy",
        "body": "function OnBeforeDelete${1:XXXX}${2:yyyy}(${1:XXXX}Key, ${2:yyyy}Key) {\n${3}\n}",
        "description": ""
    },
    "Additionnal javascript 16": {
        "scope": "javascript",
        "prefix": "OnAfterDeleteXXXXyyyy",
        "body": "function OnAfterDelete${1:XXXX}${2:yyyy}(${1:XXXX}Key, ${2:yyyy}Key) {\n${3}\n}",
        "description": ""
    }
}
